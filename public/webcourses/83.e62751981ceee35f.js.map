{"version":3,"file":"83.e62751981ceee35f.js","mappings":"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","names":["WINDOW","InjectionToken","window","document","providedIn","factory","ClipboardService","constructor","ngZone","this","copySubject","Subject","copyResponse$","asObservable","config","configure","copy","content","isSupported","pushCopyResponse","isSuccess","copyResult","copyFromContent","queryCommandSupported","isTargetValid","element","HTMLInputElement","HTMLTextAreaElement","hasAttribute","Error","copyFromInputElement","targetElm","isFocus","selectTarget","re","copyText","clearSelection","undefined","isCopySuccessInIE11","clipboardData","getData","container","body","tempTextArea","contains","destroy","parentElement","createTempTextArea","appendChild","value","toReturn","cleanUpAfterCopy","removeChild","inputElement","select","setSelectionRange","length","execCommand","focus","getSelection","removeAllRanges","doc","isRTL","documentElement","getAttribute","ta","createElement","style","fontSize","border","padding","margin","position","top","pageYOffset","scrollTop","setAttribute","response","observers","run","next","pushCopyReponse","ɵfac","i0","DOCUMENT","ɵprov","ClipboardDirective","host","renderer","clipboardSrv","cbOnSuccess","EventEmitter","cbOnError","onClick","event","handleResult","cbContent","ngOnInit","runOutsideAngular","clickListener","listen","nativeElement","ngOnDestroy","succeeded","copiedContent","successMessage","cbSuccessMsg","observed","emit","ɵdir","selectors","ClipboardModule","ɵmod","ɵinj","CommonModule","DiscountCodesService","httpClient","configService","getDiscountCodes","cid","path","params","api","route","get","pipe","codes","static","core","DiscountCodesComponent","router","activatedRoute","discountCodesService","coursesService","_snackBar","discountCodes$","snapshot","paramMap","regLinkCopied","message","open","duration","addAccessCode","navigateByUrl","pillClass","discountCode","pill_class","uses_max","uses","FadeInOut","routes","component","title","loadChildren","__webpack_require__","then","m","AddAccessCodeModule","DiscountCodesUsersModule","DiscountCodesRoutingModule","RouterModule","DiscountCodesModule","LoadingSpinnerModule","NgxStripeModule","FormsModule","ReactiveFormsModule","MatButtonModule","MatSnackBarModule","HeaderModule"],"sourceRoot":"webpack:///","sources":["./node_modules/ngx-window-token/fesm2020/ngx-window-token.mjs","./node_modules/ngx-clipboard/fesm2020/ngx-clipboard.mjs","./src/app/pages/admin/publisher/discount-codes/discount-codes.service.ts","./src/app/pages/admin/publisher/discount-codes/discount-codes.component.html","./src/app/pages/admin/publisher/discount-codes/discount-codes.component.ts","./src/app/pages/admin/publisher/discount-codes/discount-codes-routing.module.ts","./src/app/pages/admin/publisher/discount-codes/discount-codes.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nconst WINDOW = new InjectionToken('WindowToken', typeof window !== 'undefined' && window.document\n    ? { providedIn: 'root', factory: () => window }\n    : { providedIn: 'root', factory: () => undefined });\n\n/*\n * Public API Surface of ngx-window-token\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { WINDOW };\n","import { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Subject } from 'rxjs';\n\n/**\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\n */\nclass ClipboardService {\n    constructor(ngZone, document, window) {\n        this.ngZone = ngZone;\n        this.document = document;\n        this.window = window;\n        this.copySubject = new Subject();\n        this.copyResponse$ = this.copySubject.asObservable();\n        this.config = {};\n    }\n    configure(config) {\n        this.config = config;\n    }\n    copy(content) {\n        if (!this.isSupported || !content) {\n            return this.pushCopyResponse({ isSuccess: false, content });\n        }\n        const copyResult = this.copyFromContent(content);\n        if (copyResult) {\n            return this.pushCopyResponse({ content, isSuccess: copyResult });\n        }\n        return this.pushCopyResponse({ isSuccess: false, content });\n    }\n    get isSupported() {\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\n    }\n    isTargetValid(element) {\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n            if (element.hasAttribute('disabled')) {\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n            }\n            return true;\n        }\n        throw new Error('Target should be input or textarea');\n    }\n    /**\n     * Attempts to copy from an input `targetElm`\n     */\n    copyFromInputElement(targetElm, isFocus = true) {\n        try {\n            this.selectTarget(targetElm);\n            const re = this.copyText();\n            this.clearSelection(isFocus ? targetElm : undefined, this.window);\n            return re && this.isCopySuccessInIE11();\n        }\n        catch (error) {\n            return false;\n        }\n    }\n    /**\n     * This is a hack for IE11 to return `true` even if copy fails.\n     */\n    isCopySuccessInIE11() {\n        const clipboardData = this.window['clipboardData'];\n        if (clipboardData && clipboardData.getData) {\n            if (!clipboardData.getData('Text')) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     */\n    copyFromContent(content, container = this.document.body) {\n        // check if the temp textarea still belongs to the current container.\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\n            this.destroy(this.tempTextArea.parentElement || undefined);\n        }\n        if (!this.tempTextArea) {\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\n            try {\n                container.appendChild(this.tempTextArea);\n            }\n            catch (error) {\n                throw new Error('Container should be a Dom element');\n            }\n        }\n        this.tempTextArea.value = content;\n        const toReturn = this.copyFromInputElement(this.tempTextArea, false);\n        if (this.config.cleanUpAfterCopy) {\n            this.destroy(this.tempTextArea.parentElement || undefined);\n        }\n        return toReturn;\n    }\n    /**\n     * Remove temporary textarea if any exists.\n     */\n    destroy(container = this.document.body) {\n        if (this.tempTextArea) {\n            container.removeChild(this.tempTextArea);\n            // removeChild doesn't remove the reference from memory\n            this.tempTextArea = undefined;\n        }\n    }\n    /**\n     * Select the target html input element.\n     */\n    selectTarget(inputElement) {\n        inputElement.select();\n        inputElement.setSelectionRange(0, inputElement.value.length);\n        return inputElement.value.length;\n    }\n    copyText() {\n        return this.document.execCommand('copy');\n    }\n    /**\n     * Moves focus away from `target` and back to the trigger, removes current selection.\n     */\n    clearSelection(inputElement, window) {\n        inputElement && inputElement.focus();\n        window.getSelection()?.removeAllRanges();\n    }\n    /**\n     * Creates a fake textarea for copy command.\n     */\n    createTempTextArea(doc, window) {\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n        let ta;\n        ta = doc.createElement('textarea');\n        // Prevent zooming on iOS\n        ta.style.fontSize = '12pt';\n        // Reset box model\n        ta.style.border = '0';\n        ta.style.padding = '0';\n        ta.style.margin = '0';\n        // Move element out of screen horizontally\n        ta.style.position = 'absolute';\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\n        // Move element to the same position vertically\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\n        ta.style.top = yPosition + 'px';\n        ta.setAttribute('readonly', '');\n        return ta;\n    }\n    /**\n     * Pushes copy operation response to copySubject, to provide global access\n     * to the response.\n     */\n    pushCopyResponse(response) {\n        if (this.copySubject.observers.length > 0) {\n            this.ngZone.run(() => {\n                this.copySubject.next(response);\n            });\n        }\n    }\n    /**\n     * @deprecated use pushCopyResponse instead.\n     */\n    pushCopyReponse(response) {\n        this.pushCopyResponse(response);\n    }\n}\nClipboardService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.4\", ngImport: i0, type: ClipboardService, deps: [{ token: i0.NgZone }, { token: DOCUMENT }, { token: WINDOW, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nClipboardService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.4\", ngImport: i0, type: ClipboardService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.4\", ngImport: i0, type: ClipboardService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [WINDOW]\n                }] }]; } });\n\nclass ClipboardDirective {\n    constructor(ngZone, host, renderer, clipboardSrv) {\n        this.ngZone = ngZone;\n        this.host = host;\n        this.renderer = renderer;\n        this.clipboardSrv = clipboardSrv;\n        this.cbOnSuccess = new EventEmitter();\n        this.cbOnError = new EventEmitter();\n        this.onClick = (event) => {\n            if (!this.clipboardSrv.isSupported) {\n                this.handleResult(false, undefined, event);\n            }\n            else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\n                this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\n            }\n            else if (this.cbContent) {\n                this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\n            }\n        };\n    }\n    // eslint-disable-next-line no-empty, @typescript-eslint/no-empty-function\n    ngOnInit() {\n        this.ngZone.runOutsideAngular(() => {\n            // By default each host listener schedules change detection and also wrapped\n            // into additional function that calls `markForCheck()`. We're listening the `click`\n            // event in the context of the root zone to avoid running unnecessary change detections,\n            // since this directive doesn't do anything template-related (e.g. updates template variables).\n            this.clickListener = this.renderer.listen(this.host.nativeElement, 'click', this.onClick);\n        });\n    }\n    ngOnDestroy() {\n        if (this.clickListener) {\n            this.clickListener();\n        }\n        this.clipboardSrv.destroy(this.container);\n    }\n    /**\n     * Fires an event based on the copy operation result.\n     * @param succeeded\n     */\n    handleResult(succeeded, copiedContent, event) {\n        let response = {\n            isSuccess: succeeded,\n            content: copiedContent,\n            successMessage: this.cbSuccessMsg,\n            event\n        };\n        if (succeeded) {\n            if (this.cbOnSuccess.observed) {\n                this.ngZone.run(() => {\n                    this.cbOnSuccess.emit(response);\n                });\n            }\n        }\n        else {\n            if (this.cbOnError.observed) {\n                this.ngZone.run(() => {\n                    this.cbOnError.emit(response);\n                });\n            }\n        }\n        this.clipboardSrv.pushCopyResponse(response);\n    }\n}\nClipboardDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.4\", ngImport: i0, type: ClipboardDirective, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: ClipboardService }], target: i0.ɵɵFactoryTarget.Directive });\nClipboardDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.1.4\", type: ClipboardDirective, selector: \"[ngxClipboard]\", inputs: { targetElm: [\"ngxClipboard\", \"targetElm\"], container: \"container\", cbContent: \"cbContent\", cbSuccessMsg: \"cbSuccessMsg\" }, outputs: { cbOnSuccess: \"cbOnSuccess\", cbOnError: \"cbOnError\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.4\", ngImport: i0, type: ClipboardDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngxClipboard]' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: ClipboardService }]; }, propDecorators: { targetElm: [{\n                type: Input,\n                args: ['ngxClipboard']\n            }], container: [{\n                type: Input\n            }], cbContent: [{\n                type: Input\n            }], cbSuccessMsg: [{\n                type: Input\n            }], cbOnSuccess: [{\n                type: Output\n            }], cbOnError: [{\n                type: Output\n            }] } });\n\nclass ClipboardIfSupportedDirective {\n    constructor(_clipboardService, _viewContainerRef, _templateRef) {\n        this._clipboardService = _clipboardService;\n        this._viewContainerRef = _viewContainerRef;\n        this._templateRef = _templateRef;\n    }\n    ngOnInit() {\n        if (this._clipboardService.isSupported) {\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\n        }\n    }\n}\nClipboardIfSupportedDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.4\", ngImport: i0, type: ClipboardIfSupportedDirective, deps: [{ token: ClipboardService }, { token: i0.ViewContainerRef }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nClipboardIfSupportedDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.1.4\", type: ClipboardIfSupportedDirective, selector: \"[ngxClipboardIfSupported]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.4\", ngImport: i0, type: ClipboardIfSupportedDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngxClipboardIfSupported]'\n                }]\n        }], ctorParameters: function () { return [{ type: ClipboardService }, { type: i0.ViewContainerRef }, { type: i0.TemplateRef }]; } });\n\nclass ClipboardModule {\n}\nClipboardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.4\", ngImport: i0, type: ClipboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nClipboardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.1.4\", ngImport: i0, type: ClipboardModule, declarations: [ClipboardDirective, ClipboardIfSupportedDirective], imports: [CommonModule], exports: [ClipboardDirective, ClipboardIfSupportedDirective] });\nClipboardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.1.4\", ngImport: i0, type: ClipboardModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.4\", ngImport: i0, type: ClipboardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\n                    exports: [ClipboardDirective, ClipboardIfSupportedDirective]\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-clipboard\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ClipboardDirective, ClipboardIfSupportedDirective, ClipboardModule, ClipboardService };\n","import { Injectable } from '@angular/core'\r\nimport { HttpClient } from '@angular/common/http'\r\nimport { ConfigService } from 'src/app/core/services/config/config.service'\r\nimport { Coupon } from 'src/app/models/coupon.model'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DiscountCodesService {\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private configService: ConfigService,\r\n  ) { }\r\n\r\n  getDiscountCodes(cid?: string) {\r\n    let path = `${this.configService.params.api.route}/admin/publisher/access-codes`\r\n    path = (cid) ? `${path}?cid=${cid}` : path\r\n    return this.httpClient.get<Coupon[]>(path).pipe(codes => codes)\r\n  }\r\n}\r\n","<div id=\"fullMainContent\" class=\"container my-5\" @fadeInOut>\r\n\r\n  <app-header [title]=\"'course access codes'\"></app-header>\r\n\r\n  <div *ngIf=\"discountCodes$ | async as discountCodes; else loading\" @fadeInOut>\r\n\r\n    <div *ngIf=\"discountCodes.length === 0\" class=\"container lead text-center my-5\">\r\n      You don't have any courses with access codes.\r\n    </div>\r\n\r\n    <div *ngFor=\"let courseDiscountCodes of discountCodes\">\r\n\r\n      <div class=\"card my-4\">\r\n        <div class=\"row no-gutters justify-content-between\">\r\n          <div class=\"col-lg-3\">\r\n            <div class=\"card\">\r\n              <img\r\n                class=\"card-img-top\"\r\n                style=\"object-fit: cover; height: 11rem;\"\r\n                [src]=\"this.coursesService.coverImage(courseDiscountCodes.course)\"\r\n                alt=\"{{courseDiscountCodes.course.cover_alt}}\"\r\n              >\r\n            </div>\r\n          </div>\r\n          <div class=\"col-lg-6 p-3\">\r\n            <div class=\"h4\">{{ courseDiscountCodes.course.title }}</div>\r\n            <div>{{ courseDiscountCodes.course.created_at | date:'longDate' }}</div>\r\n            <div class=\"text-dark\">ID: {{ courseDiscountCodes.course.id }}</div>\r\n          </div>\r\n          <div class=\"col-lg-3 p-3 text-lg-right\">\r\n            <button mat-button color=\"primary\" class=\"border\" (click)=\"addAccessCode(courseDiscountCodes.course.id)\">\r\n              Add code\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div *ngIf=\"courseDiscountCodes.coupons.length === 0; else showCodes\" class=\"container lead text-center my-5\">\r\n        This course does not have any access codes.\r\n      </div>\r\n\r\n      <ng-template #showCodes>\r\n        <table class=\"table table-bordered table-hover table-striped\">\r\n          <thead>\r\n            <tr>\r\n              <th class=\"text-uppercase\">\r\n                code\r\n                <span class=\"badge badge-pill badge-success font-weight-light text-capitalize mt-1 float-right\">Available</span>\r\n              </th>\r\n              <th class=\"text-uppercase\">label</th>\r\n              <th class=\"text-right text-uppercase\">students</th>\r\n              <th class=\"text-right text-uppercase d-none d-md-table-cell\">seats</th>\r\n              <th class=\"text-center text-uppercase d-none d-md-table-cell\">last used</th>\r\n              <th class=\"text-center text-uppercase d-none d-xl-table-cell\">created</th>\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n            <tr\r\n              *ngFor=\"let discountCode of courseDiscountCodes.coupons, let i = index, let l = last\"\r\n            >\r\n              <td\r\n                [cbContent]=\"'https://www.cultivatelearning.ca/user/register?code=' + discountCode.code\"\r\n                [title]=\"'Copy https://www.cultivatelearning.ca/user/register?code=' + discountCode.code\"\r\n                (click)=\"regLinkCopied('Registration link copied.')\"\r\n                class=\"handy text-primary\"\r\n                ngxClipboard\r\n              >\r\n                <!-- (cbOnSuccess)=\"tooltip.show\" -->\r\n                <!--\r\n                  cbOnSuccess is broken in v16 of ngx-clipboard:\r\n                  https://github.com/maxisam/ngx-clipboard/issues/310\r\n                -->\r\n\r\n                <div>\r\n                  <span>{{ discountCode.code }}</span>\r\n                  <i class=\"fa-solid fa-copy mx-2 text-secondary\"></i>\r\n                  <span\r\n                    class=\"badge badge-pill font-weight-light mt-1 float-right\"\r\n                    [ngClass]=\"pillClass(discountCode)\"\r\n                    [innerHtml]=\"(discountCode.uses_max === 0) ? '&#8734;' : discountCode.uses_max - discountCode.uses\"\r\n                  >\r\n                  </span>\r\n                </div>\r\n              </td>\r\n              <td>{{ discountCode.label }}</td>\r\n              <td\r\n                [routerLink]=\"[discountCode.id, 'users']\"\r\n                title=\"Report\"\r\n                class=\"text-right handy text-primary\"\r\n              >\r\n                {{ discountCode.uses }}\r\n                <span class=\"d-inline d-md-none text-dark\">/\r\n                  <span [innerHTML]=\"(discountCode.uses_max === 0) ? '&#8734;' : discountCode.uses_max\"></span>\r\n                </span>\r\n              </td>\r\n              <td class=\"text-right d-none d-md-table-cell\" [innerHTML]=\"discountCode.uses_max === 0 ? '&#8734;' : discountCode.uses_max\"></td>\r\n              <td class=\"text-center d-none d-md-table-cell\">{{ discountCode.updated_at | date:'mediumDate' }}</td>\r\n              <td class=\"text-center d-none d-xl-table-cell\">{{ discountCode.created_at | date:'mediumDate' }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </ng-template>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #loading>\r\n  <app-loading-spinner></app-loading-spinner>\r\n</ng-template>\r\n","import { Component, OnInit } from '@angular/core'\r\nimport { Observable } from 'rxjs'\r\nimport { Router, ActivatedRoute } from '@angular/router'\r\nimport { MatSnackBar } from '@angular/material/snack-bar'\r\n\r\n// WNGX imports\r\nimport { DiscountCodesService } from './discount-codes.service'\r\nimport { FadeInOut } from 'src/app/core/animations/fade-in-out.animation'\r\nimport { CoursesService } from '../courses/courses.service'\r\n\r\n@Component({\r\n  selector: 'app-discount-codes',\r\n  templateUrl: './discount-codes.component.html',\r\n  styleUrls: ['./discount-codes.component.scss'],\r\n  animations: [FadeInOut]\r\n})\r\nexport class DiscountCodesComponent implements OnInit {\r\n\r\n  public discountCodes$: Observable<any[]>\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n    private discountCodesService: DiscountCodesService,\r\n    public coursesService: CoursesService,\r\n    private _snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.discountCodes$ = this.discountCodesService.getDiscountCodes(\r\n      this.activatedRoute.snapshot.paramMap.get('cid')\r\n    )\r\n  }\r\n\r\n  regLinkCopied(message: string) {\r\n    this._snackBar.open(message, '', {\r\n      duration: 2000\r\n    })\r\n  }\r\n\r\n  addAccessCode(cid) {\r\n    this.router.navigateByUrl(`/admin/publisher/discount-codes/add?cid=${cid}`)\r\n  }\r\n\r\n  pillClass(discountCode) {\r\n    let pill_class = \"badge-success\"\r\n    if ((discountCode.uses_max - discountCode.uses) < 10 && discountCode.uses_max != 0) pill_class = \"badge-warning\"\r\n    if ((discountCode.uses_max - discountCode.uses) <= 0 && discountCode.uses_max != 0) pill_class = \"badge-danger\"\r\n    return pill_class\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { RouterModule, Routes } from '@angular/router'\r\nimport { DiscountCodesComponent } from './discount-codes.component'\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: DiscountCodesComponent,\r\n    title: 'Courses access codes (Cultivate Learning)'\r\n  },\r\n  {\r\n    path: ':cid',\r\n    component: DiscountCodesComponent,\r\n    title: 'Course access codes (Cultivate Learning)'\r\n  },\r\n  {\r\n    path: 'add',\r\n    loadChildren: () => import('./add-access-code/add-access-code.module').then(m => m.AddAccessCodeModule)\r\n  },\r\n  {\r\n    path: ':code_id/users',\r\n    loadChildren: () => import('./discount-codes-users/discount-codes-users.module').then(m => m.DiscountCodesUsersModule),\r\n  }\r\n]\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    [RouterModule.forChild(routes)],\r\n    CommonModule\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class DiscountCodesRoutingModule { }\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { NgxStripeModule } from 'ngx-stripe'\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\r\nimport { MatButtonModule } from '@angular/material/button'\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar'\r\n\r\n// 3rd party modules\r\nimport { ClipboardModule } from 'ngx-clipboard'\r\n\r\n// WNGX modules and components\r\nimport { DiscountCodesRoutingModule } from './discount-codes-routing.module'\r\nimport { LoadingSpinnerModule } from 'src/app/core/modules/loading-spinner/loading-spinner.module'\r\nimport { DiscountCodesComponent } from './discount-codes.component'\r\nimport { HeaderModule } from '../blocks/header/header.module'\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DiscountCodesComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ClipboardModule,\r\n    DiscountCodesRoutingModule,\r\n    LoadingSpinnerModule,\r\n    NgxStripeModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatButtonModule,\r\n    MatSnackBarModule,\r\n    HeaderModule\r\n  ],\r\n  exports: [\r\n    DiscountCodesComponent\r\n  ]\r\n})\r\n\r\nexport class DiscountCodesModule { }\r\n"],"x_google_ignoreList":[0,1]}