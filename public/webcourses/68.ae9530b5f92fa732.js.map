{"version":3,"file":"68.ae9530b5f92fa732.js","mappings":"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","names":["i0","ctx_r5","CollectUserNamesComponent","constructor","ngbModal","httpClient","configService","this","ngOnInit","btnClick","names","status","post","params","api","route","subscribe","user","countDown","error","console","log","success","setInterval","percent","clearInterval","setTimeout","dismissAll","location","reload","static","core","selectors","FadeInOut","DndService","showUserOrder","activity","userOrder","Array","user_answers","forEach","aid","push","answers","find","isAid","answer","id","answer_id","factory","ClickRotateService","ActiveModeService","completionStatsService","dndService","clickRotateService","activitiesService","extractAnswers","extractedAnswer","activityType","lastActivityInSet","meta","activity_type","extractOnlySelectedOptions","dndExtract","activities","JSON","stringify","userSelections","activityForm","value","userAnswerPOST","activity_id","activity_supplemental","totalActivitiesCompleted","waitingForApi","after_word","i","length","j","selected","err","reduce","ActiveModeComponent","fb","activeModeService","answerValidators","radio","Validators","checkbox","text","default_answer","textarea","group","style","updateSelections","singleSelection","y","NavComponent","navService","selectedCourseService","faStepBackward","faCheck","faStepForward","faPenNib","activitySet","SaveButton","calcFollowingAid","offset","calcStartActivity","seq","courseSyllabus","findIndex","activityMeta","endOfCourse","chapter_id","endOfChapter","nextAid","NavigateByAid","ContinueButton","ReviewButton","FadeInOut2","dispatch","state","subscriber","counter","period","next","schedule","extendStyles","dest","source","importantProperties","key","hasOwnProperty","setProperty","has","removeProperty","toggleNativeDragInteractions","element","enable","userSelect","toggleVisibility","position","top","opacity","left","combineTransforms","transform","initialTransform","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","name","getPropertyValue","split","map","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","x","isInsideClientRect","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","scrollTop","scrollLeft","handleScroll","event","target","_getEventTarget","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","window","scrollY","scrollX","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","dragImportantProperties","Set","DragRef","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","Subject","_pointerMoveSubscription","Subscription","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","targetHandle","_getTargetHandle","disabled","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","Math","abs","_pickupPositionOnPage","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_dropContainer","_endDragSequence","isDragging","isReceiving","preventDefault","run","_startDragSequence","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","constrainPosition","_initialClientRect","activeTransform","_applyRootElementTransform","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","newValue","coerceBooleanProperty","_toggleNativeDragInteractions","handle","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","coerceElement","disabledHandles","add","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","SVGElement","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","change","_containInsideBoundaryOnResize","parent","_parentDragRef","dispose","remove","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","_preview","_previewRef","destroy","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","_getShadowRoot","insertBefore","_createPreviewElement","body","appendChild","replaceChild","_getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_previewRect","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","previewConfig","previewClass","preview","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","getTransform","margin","zIndex","classList","setAttribute","isArray","className","Promise","resolve","placeholderRect","duration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","property","prop","propertyIndex","rawDurations","rawDelays","handler","propertyName","removeEventListener","clearTimeout","timeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","round","min","max","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","SingleAxisSortStrategy","_element","_itemPositions","orientation","_previousSwap","drag","overlaps","items","withItems","sort","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","index","isDraggedItem","elementToOffset","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","splice","parentElement","_cacheItemPositions","withSortPredicate","predicate","_sortPredicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","elementToMeasure","a","b","immediateSibling","end","itemPositions","lastItemRect","firstItemRect","floor","SCROLL_PROXIMITY_THRESHOLD","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","_isDragging","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","interval","scheduler","async","isNumeric","Observable","animationFrameScheduler","pipe","takeUntil","_scrollNode","scrollStep","scrollBy","withScrollableParents","registerDropContainer","_sortStrategy","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","previousItems","filter","every","connectedTo","withOrientation","_scrollableElements","size","_clientRect","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getViewportSize","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","_canReceive","elementFromPoint","nativeElement","_startReceiving","activeSiblings","draggedItems","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","e","options","config","_clearGlobalListeners","streams","observer","eventOptions","merge","ngOnDestroy","instance","ɵfac","DOCUMENT","ɵprov","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","i1","CDK_DRAG_PARENT","InjectionToken","CDK_DROP_LIST_GROUP","CDK_DRAG_CONFIG","_uniqueIdCounter","CDK_DROP_LIST","CdkDropList","dragDrop","_changeDetectorRef","_scrollDispatcher","_dir","_group","_destroyed","EventEmitter","_unsortedItems","_dropListRef","data","_assignDefaults","_setupInputSyncSubscription","_handleEvents","_dropLists","_items","addItem","_syncItemsWithRef","removeItem","getSortedItems","_dragRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","ref","startWith","coerceArray","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","coerceNumberProperty","markForCheck","emit","dropEvent","draggingDisabled","listAutoScrollDisabled","listOrientation","i3","ɵdir","provide","useValue","useExisting","CDK_DRAG_HANDLE","CDK_DRAG_PLACEHOLDER","CDK_DRAG_PREVIEW","CdkDrag","_viewContainerRef","_selfHandle","_parentDrag","subscription","movedEvent","_syncInputs","ngAfterViewInit","onStable","take","_updateRootElement","_setupHandlesListener","freeDragPosition","ngOnChanges","changes","rootSelectorChange","rootElementSelector","positionChange","firstChange","closest","_getBoundaryElement","boundary","dir","templateRef","startEvent","releaseEvent","endEvent","enterEvent","exitEvent","tap","childHandleElements","switchMap","_stateChanges","handleInstance","dragRef","dirIndex","_t","ctx","DragDropModule","ɵmod","ɵinj","imports","CdkScrollableModule","DndComponent","dndMatchDataStatic","caption","activityChange","showInitialOrder","slot","showCorrectOrder","correct","orderButtons","$event","clickedElement","srcElement","markOrder","isCertainButtonAlreadyActive","querySelector","ClickRotateComponent","rotateItems","parse","assess_text","periodId","parseInt","Object","keys","showLabel","option","showMarkingType","checkIfCapsNeeded","previousAnswer","markColours","colours","showMarking","DemoFlagService","saveActivityDemoStatus","put","response","DemoFlagComponent","demoFlagService","activityDemoFlagToggle","firstActivity","BeforeAndAfterComponent","faSpinner","beforeAfter$","beforeAfter","url","CompletionCertService","selectedCourse","downloadCertificate","downloadCertificateLoading","responseType","dataType","binaryData","downloadLink","document","href","URL","createObjectURL","Blob","fileName","click","CompletionCertComponent","completionCertService","faFileArrowDown","downloadCertificateBtn","SpecialActivityComponent","BookmarksService","BehaviorSubject","bookmarksSubject","asObservable","getBookmarks","cid","bookmarks","deleteBookmark","addBookmark","BookmarkButtonComponent","bookmarksService","sub","deletedBookmarkAid$","bookmark","deleteBookmarkBtn","updateSidebarBookmarksTabOnDelete","existingBookmarks","addBookmarkBtn","updateSidebarBookmarksTabOnAdd","deleted","ChapterEndComponent","courseChapterIndexService","CourseEndComponent","WorkAreaComponent","userService","faPrint","printButton","print","PublisherInfoComponent","faGlobe","faEnvelope","ActivitiesBarComponent","activityBarClick","tac","lockStatusClass","ChapterIndexComponent","chapterUnlock","chapterIndex","chapterNumber","syllabus","SelectedComponent","ActivityHelpComponent","selectedActivitySet$","getActivityHelp","help","activityHelp$","shareReplay","BookmarksComponent","router","loadBookmarkedActivity","navigateByUrl","routes","path","redirectTo","pathMatch","component","ActivitiesComponent","activatedRoute","publisherService","faUserGraduate","faList","faLeaf","faInfoCircle","faQuestionCircle","faChevronUp","faChevronDown","faBookBookmark","modalOptions","backdrop","centered","keyboard","first_name","open","componentInstance","getActivities","snapshot","paramMap","bootstrapCourse","loadActivities","ActivitiesRoutingModule","RouterModule","CommonModule","ActiveModeModule","ReactiveFormsModule","PipesModule","NavModule","FontAwesomeModule","DndModule","ClickRotateModule","DemoFlagModule","FormsModule","BeforeAndAfterModule","CompletionCertModule","SpecialActivityModule","BookmarkButtonModule","WorkAreaModule","ReviewModeModule","PublisherInfoModule","LoadingSpinnerModule","ActivitiesBarModule","ChapterIndexModule","SelectedModule","NgbModule","ActivityHelpModule","BookmarksModule","ActivitiesModule","ThemeModule"],"sourceRoot":"webpack:///","sources":["./src/app/pages/webcourse/activities/components/collect-user-names/collect-user-names.component.html","./src/app/pages/webcourse/activities/components/collect-user-names/collect-user-names.component.ts","./src/app/pages/webcourse/activities/workarea/activities/dnd/dnd.service.ts","./src/app/pages/webcourse/activities/workarea/activities/click-rotate/click-rotate.service.ts","./src/app/pages/webcourse/activities/workarea/active-mode/active-mode.service.ts","./src/app/pages/webcourse/activities/workarea/active-mode/active-mode.component.html","./src/app/pages/webcourse/activities/workarea/active-mode/active-mode.component.ts","./src/app/pages/webcourse/activities/workarea/nav/nav.component.html","./src/app/pages/webcourse/activities/workarea/nav/nav.component.ts","./node_modules/rxjs/_esm2015/internal/observable/interval.js","./node_modules/@angular/cdk/fesm2020/drag-drop.mjs","./src/app/pages/webcourse/activities/workarea/activities/dnd/dnd.component.html","./src/app/pages/webcourse/activities/workarea/activities/dnd/dnd.component.ts","./src/app/pages/webcourse/activities/workarea/activities/click-rotate/click-rotate.component.html","./src/app/pages/webcourse/activities/workarea/activities/click-rotate/click-rotate.component.ts","./src/app/pages/webcourse/builder/activity/demo-flag/demo-flag.service.ts","./src/app/pages/webcourse/builder/activity/demo-flag/demo-flag.component.ts","./src/app/pages/webcourse/builder/activity/demo-flag/demo-flag.component.html","./src/app/pages/webcourse/activities/workarea/activities/special-activity/before-and-after/before-and-after.component.html","./src/app/pages/webcourse/activities/workarea/activities/special-activity/before-and-after/before-and-after.component.ts","./src/app/pages/webcourse/activities/workarea/activities/special-activity/completion-cert/completion-cert.service.ts","./src/app/pages/webcourse/activities/workarea/activities/special-activity/completion-cert/completion-cert.component.html","./src/app/pages/webcourse/activities/workarea/activities/special-activity/completion-cert/completion-cert.component.ts","./src/app/pages/webcourse/activities/workarea/activities/special-activity/special-activity.component.html","./src/app/pages/webcourse/activities/workarea/activities/special-activity/special-activity.component.ts","./src/app/pages/webcourse/activities/sidebar/bookmarks/bookmarks.service.ts","./src/app/pages/webcourse/activities/sidebar/bookmarks/bookmark-button/bookmark-button.component.html","./src/app/pages/webcourse/activities/sidebar/bookmarks/bookmark-button/bookmark-button.component.ts","./src/app/pages/webcourse/activities/workarea/components/chapter-end/chapter-end.component.html","./src/app/pages/webcourse/activities/workarea/components/chapter-end/chapter-end.component.ts","./src/app/pages/webcourse/activities/workarea/components/course-end/course-end.component.ts","./src/app/pages/webcourse/activities/workarea/components/course-end/course-end.component.html","./src/app/pages/webcourse/activities/workarea/workarea.component.html","./src/app/pages/webcourse/activities/workarea/workarea.component.ts","./src/app/pages/webcourse/activities/sidebar/publisher-info/publisher-info.component.html","./src/app/pages/webcourse/activities/sidebar/publisher-info/publisher-info.component.ts","./src/app/pages/webcourse/activities/sidebar/shared/activities-bar/activities-bar.component.html","./src/app/pages/webcourse/activities/sidebar/shared/activities-bar/activities-bar.component.ts","./src/app/pages/webcourse/activities/sidebar/chapter-index/chapter-index.component.html","./src/app/pages/webcourse/activities/sidebar/chapter-index/chapter-index.component.ts","./src/app/pages/webcourse/activities/sidebar/selected/selected.component.html","./src/app/pages/webcourse/activities/sidebar/selected/selected.component.ts","./src/app/pages/webcourse/activities/sidebar/activity-help/activity-help.component.html","./src/app/pages/webcourse/activities/sidebar/activity-help/activity-help.component.ts","./src/app/pages/webcourse/activities/sidebar/bookmarks/bookmarks.component.html","./src/app/pages/webcourse/activities/sidebar/bookmarks/bookmarks.component.ts","./src/app/pages/webcourse/activities/activities.component.html","./src/app/pages/webcourse/activities/activities-routing.module.ts","./src/app/pages/webcourse/activities/activities.component.ts","./src/app/pages/webcourse/activities/workarea/active-mode/active-mode.module.ts","./src/app/pages/webcourse/activities/workarea/nav/nav.module.ts","./src/app/pages/webcourse/activities/workarea/activities/dnd/dnd.module.ts","./src/app/pages/webcourse/activities/workarea/activities/click-rotate/click-rotate.module.ts","./src/app/pages/webcourse/builder/activity/demo-flag/demo-flag.module.ts","./src/app/pages/webcourse/activities/workarea/activities/special-activity/before-and-after/before-and-after.module.ts","./src/app/pages/webcourse/activities/workarea/activities/special-activity/completion-cert/completion-cert.module.ts","./src/app/pages/webcourse/activities/workarea/activities/special-activity/special-activity.module.ts","./src/app/pages/webcourse/activities/sidebar/bookmarks/bookmark-button/bookmark-button.module.ts","./src/app/pages/webcourse/activities/workarea/workarea.module.ts","./src/app/pages/webcourse/activities/sidebar/publisher-info/publisher-info.module.ts","./src/app/pages/webcourse/activities/sidebar/shared/activities-bar/activities-bar.module.ts","./src/app/pages/webcourse/activities/sidebar/chapter-index/chapter-index.module.ts","./src/app/pages/webcourse/activities/sidebar/selected/selected.module.ts","./src/app/pages/webcourse/activities/sidebar/activity-help/activity-help.module.ts","./src/app/pages/webcourse/activities/sidebar/bookmarks/bookmarks.module.ts","./src/app/pages/webcourse/activities/activities.module.ts"],"sourcesContent":["<ng-template [ngIf]=\"status === 'updating'\">\r\n  <div class=\"modal-body\">\r\n    <div class=\"my-3 lead text-center\">\r\n      <span class=\"text-info font-weight-bold\">Updating your profile.</span><br>\r\n      How's the weather today?\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template [ngIf]=\"status === 'failedUpdate'\">\r\n  <div class=\"modal-body\" @fadeInOut>\r\n    <div class=\"my-3 lead text-center\">\r\n      <span class=\"text-danger font-weight-bold\">Update failed.</span><br>\r\n      Rebooting session...\r\n    </div>\r\n  </div>\r\n  <ngb-progressbar [value]=\"percent\" type=\"danger\" height=\"3px\"></ngb-progressbar>\r\n</ng-template>\r\n\r\n<ng-template [ngIf]=\"status === 'prompt'\">\r\n  <div class=\"modal-header\">\r\n    <h4 class=\"common-heading my-auto\" id=\"modal-basic-title\">Before you continue.....</h4>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <form #names=\"ngForm\" (keyup.enter)=\"names.form.valid ? btnClick(names.value) : ''\">\r\n      <div>\r\n        <p>Please provide a name for the course student reports.</p>\r\n        <div class=\"mb-4\" class=\"d-block w-50\">\r\n          <input ngModel\r\n            [(ngModel)]=\"user.first_name\"\r\n            type=\"text\"\r\n            name=\"first_name\"\r\n            placeholder=\"First name\"\r\n            minlength=\"2\"\r\n            maxlength=\"50\"\r\n            class=\"form-control form-control-secondary my-2\"\r\n            required\r\n          >\r\n          <input ngModel\r\n            [(ngModel)]=\"user.last_name\"\r\n            type=\"text\"\r\n            name=\"last_name\"\r\n            placeholder=\"Last name\"\r\n            minlength=\"2\"\r\n            maxlength=\"20\"\r\n            class=\"form-control form-control-secondary my-2\"\r\n            required\r\n            >\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n  <div class=\"modal-footer\">\r\n    <button\r\n      type=\"submit\" class=\"btn btn-success\"\r\n      (click)=\"btnClick(names.value)\"\r\n      [disabled]=\"names.form.invalid\"\r\n    >\r\n      Save\r\n    </button>\r\n\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template [ngIf]=\"status === 'saved'\">\r\n  <div class=\"modal-body\" @fadeInOut>\r\n    <div class=\"my-3 lead text-center\">\r\n      <span class=\"text-success font-weight-bold\">Your profile was updated successfully.</span><br>\r\n      Thank you, <span class=\"text-capitalize font-weight-bold\">{{ user.first_name }}</span>.\r\n    </div>\r\n  </div>\r\n  <ngb-progressbar [value]=\"percent\" type=\"success\" height=\"3px\"></ngb-progressbar>\r\n</ng-template>\r\n","import { Component, Input, OnInit } from '@angular/core'\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap'\r\nimport { HttpClient } from '@angular/common/http'\r\n\r\nimport { ConfigService } from './../../../../../core/services/config/config.service'\r\nimport { JetstreamUser } from 'src/app/core/models/jetstream-user.model'\r\nimport { FadeInOut } from 'src/app/core/animations/fade-in-out.animation'\r\n\r\n@Component({\r\n  selector: 'app-collect-user-names',\r\n  templateUrl: './collect-user-names.component.html',\r\n  styleUrls: ['./collect-user-names.component.scss'],\r\n  animations: [FadeInOut]\r\n})\r\nexport class CollectUserNamesComponent implements OnInit {\r\n\r\n  @Input() user: JetstreamUser\r\n\r\n  // Used in HTML template, options are: prompt, updating, failedUpdate, saved\r\n  status = 'prompt'\r\n  percent = 100\r\n\r\n  constructor(\r\n    private ngbModal: NgbModal,\r\n    private httpClient: HttpClient,\r\n    private configService: ConfigService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  btnClick(names) {\r\n    this.status = 'updating'\r\n\r\n    this.httpClient.post(`${this.configService.params.api.route}/user/profile/user_name`, names).subscribe(\r\n      (user: JetstreamUser) => {\r\n        this.status = 'saved'\r\n        this.user = user\r\n        this.countDown(true)\r\n      },\r\n      (error) => {\r\n        this.status = 'failedUpdate'\r\n        this.countDown(false)\r\n        console.log(error)\r\n      }\r\n    )\r\n  }\r\n\r\n  countDown(success: boolean) {\r\n    let countDown = setInterval(() => {\r\n      this.percent--\r\n      if (this.percent < 0) {\r\n        clearInterval(countDown)\r\n        setTimeout(() => {\r\n          success ? this.ngbModal.dismissAll() : location.reload()\r\n        }, 1000)\r\n      }\r\n    }, 20)\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core'\r\nimport { Activity } from './../../models/activity.model'\r\nimport { ActivityAnswers } from './../../models/activity-answers.model'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DndService {\r\n\r\n  constructor() { }\r\n\r\n  showUserOrder(activity: Activity) {\r\n    // Orders the items in the sequence that the user selected\r\n    let userOrder = new Array()\r\n    activity.user_answers.forEach(aid => {\r\n      function isAid(answer: ActivityAnswers) {\r\n        return answer.id === aid.answer_id\r\n      }\r\n      userOrder.push(activity.answers.find(isAid))\r\n    })\r\n    activity.answers = userOrder\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class ClickRotateService {\r\n\r\n  public userSelections = {}\r\n  public showMarking = 'user'\r\n\r\n  constructor() { }\r\n\r\n}\r\n","import { Injectable } from '@angular/core'\r\nimport { HttpClient } from '@angular/common/http'\r\nimport { FormGroup } from '@angular/forms'\r\n\r\n// WNGX services\r\nimport { UserService } from '../../../../../core/services/user/user.service'\r\nimport { CompletionStatsService } from './../../../../../core/services/user/completion-stats.service'\r\nimport { ConfigService } from '../../../../../core/services/config/config.service'\r\nimport { DndService } from './../activities/dnd/dnd.service'\r\nimport { ClickRotateService } from '../activities/click-rotate/click-rotate.service'\r\nimport { ActivitiesService } from '../../activities.service'\r\n\r\n// WNGX models and misc\r\nimport { Activity } from './../models/activity.model'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActiveModeService {\r\n\r\n  public activityForm: FormGroup\r\n  saving = false\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private configService: ConfigService,\r\n    public user: UserService,\r\n    private completionStatsService: CompletionStatsService,\r\n    private dndService: DndService,\r\n    private clickRotateService: ClickRotateService,\r\n    private activitiesService: ActivitiesService\r\n  ) { }\r\n\r\n  extractAnswers() {\r\n    // We need to do a bit of work to get answers from certain activity types\r\n    // This is where this work gets done\r\n    let extractedAnswer: any\r\n    let activityType = this.lastActivityInSet.meta.activity_type\r\n\r\n    if (activityType === 'checkbox' || activityType === 'click') {\r\n      extractedAnswer = this.extractOnlySelectedOptions()\r\n    } else if (activityType === 'dnd' || activityType === 'dnd-match') {\r\n      extractedAnswer = this.dndExtract(this.activitiesService.activities)\r\n    } else if (activityType === 'click2') {\r\n      extractedAnswer = JSON.stringify(this.clickRotateService.userSelections)\r\n    } else if (activityType === 'radio') {\r\n      extractedAnswer = [this.activityForm.value.answer]\r\n    } else if (activityType === 'text' || activityType === 'textarea') {\r\n      extractedAnswer = { \"answer\": this.activityForm.value.answer }\r\n    } else {\r\n      extractedAnswer = JSON.stringify(42) // info and custom types\r\n    }\r\n\r\n    return extractedAnswer\r\n\r\n  }\r\n\r\n  userAnswerPOST(user_answers) {\r\n    this.httpClient.post(\r\n      `${this.configService.params.api.route}/webcourse/activities/${this.lastActivityInSet.meta.activity_id}/user_answer`, user_answers\r\n    ).subscribe(\r\n      (activity_supplemental) => {\r\n        this.completionStatsService.totalActivitiesCompleted++\r\n        this.activitiesService.waitingForApi = false\r\n\r\n        if (activity_supplemental['after_word']) {\r\n          this.lastActivityInSet.after_word = activity_supplemental['after_word']\r\n        }\r\n\r\n        if (activity_supplemental['answers']) {\r\n          this.lastActivityInSet.answers = activity_supplemental['answers']\r\n        }\r\n\r\n        if (user_answers) {\r\n          this.lastActivityInSet.user_answers = user_answers\r\n\r\n          if (this.lastActivityInSet.meta.activity_type === 'dnd' || this.lastActivityInSet.meta.activity_type === 'dnd-match') {\r\n            this.dndService.showUserOrder(this.lastActivityInSet)\r\n          } else {\r\n            // Loop through last activity answers\r\n            for (let i = 0; i < this.lastActivityInSet.answers.length; i++) {\r\n              // Loop through user answers\r\n              for (let j = 0; j < user_answers.length; j++) {\r\n                if (this.lastActivityInSet.answers[i].id === user_answers[j]) {\r\n                  this.lastActivityInSet.answers[i].selected = true\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // Afterword, correct answers, etc might be returned when saving user answers\r\n        // If they do, merge them back into the activities object\r\n        this.activitiesService.activities[this.activitiesService.activities.length - 1] = {\r\n          ...this.activitiesService.activities[this.activitiesService.activities.length - 1], ...activity_supplemental\r\n        }\r\n\r\n      },\r\n      (err) => {\r\n        console.log('ERROR #2334.')\r\n        this.activitiesService.waitingForApi = false\r\n      }\r\n    )\r\n  }\r\n\r\n  extractOnlySelectedOptions() {\r\n    // Reduces all checkbox options to IDs of selected ones only.\r\n    const answers = this.lastActivityInSet.answers\r\n      .reduce(\r\n        (selected, id) => {\r\n          if (id.selected) {\r\n            selected.push(id.id)\r\n          }\r\n          return selected\r\n        }, []\r\n      )\r\n    return answers\r\n  }\r\n\r\n  dndExtract(activities: Activity[]) {\r\n    let extractedAnswer = []\r\n    // Loop through activity answers, build array of AIDs only, in user selected order\r\n    activities[this.activitiesService.activities.length - 1].answers.forEach(answer => {\r\n      extractedAnswer.push(answer.id)\r\n    })\r\n    return extractedAnswer\r\n  }\r\n\r\n  get lastActivityInSet() {\r\n    return <Activity>this.activitiesService.activities[\r\n      this.activitiesService.activities.length - 1\r\n    ]\r\n  }\r\n}\r\n","<form [formGroup]=\"this.activeModeService.activityForm\">\r\n  <div class=\"row\">\r\n\r\n      <!-- RADIO FORM -->\r\n\r\n      <div *ngIf=\"activity.meta.activity_type === 'radio'\" class=\"container-fluid\">\r\n\r\n        <div *ngFor=\"let option of activity.answers; let i = index\" class=\"row\">\r\n\r\n          <div class=\"col-sm-1 col-2 my-1 text-center\">\r\n            <input\r\n              type=\"radio\"\r\n              [id]=\"option.id\"\r\n              [value]=\"option.id\"\r\n              formControlName=\"answer\"\r\n            >\r\n          </div>\r\n\r\n          <div class=\"col-sm-10 col-9 my-1\">\r\n            <label class=\"form-check-label\"\r\n              [for]=\"option.id\"\r\n              [innerHtml]=\"option.caption  | safehtml: 'html'\"\r\n              >\r\n            </label>\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n\r\n      <!-- CHECKBOX FORM -->\r\n\r\n      <div *ngIf=\"activity.meta.activity_type === 'checkbox'\" class=\"container-fluid mx-3\">\r\n\r\n        <div *ngFor=\"let option of activity.answers; let i = index\" class=\"row\">\r\n\r\n          <div class=\"col-sm-1 col-2 my-1\">\r\n            <input\r\n              type=\"checkbox\"\r\n              [id]=\"option.id\"\r\n              [value]=\"option.id\"\r\n              formControlName=\"answer\"\r\n              (click)=\"updateSelections(i)\"\r\n              >\r\n          </div>\r\n\r\n          <div class=\"col-sm-10 col-9 my-1\">\r\n            <label class=\"form-check-label\"\r\n              [for]=\"option.id\"\r\n              [innerHtml]=\"option.caption | safehtml: 'html'\"\r\n              >\r\n            </label>\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n      <!-- TEXTAREA FORM -->\r\n      <div *ngIf=\"activity.meta.activity_type === 'textarea'\" class=\"container\">\r\n        <textarea cols=\"66\"\r\n          [rows]=\"(activity?.default_answer) ?\r\n            (activity.default_answer.length / 78 ) : 5\"\r\n          class=\"form-control\"\r\n          formControlName=\"answer\"\r\n          [value]=\"activity.default_answer\"\r\n        ></textarea>\r\n      </div>\r\n\r\n      <!-- TEXT FORM -->\r\n\r\n      <div *ngIf=\"activity.meta.activity_type === 'text'\" class=\"container\">\r\n        <input type=\"text\" class=\"form-control\"\r\n          formControlName=\"answer\"\r\n          [value]=\"activity.answers\"\r\n          [src]=\"activity\"\r\n        >\r\n      </div>\r\n\r\n      <!-- CLICK ACTIVITY -->\r\n\r\n      <div *ngIf=\"activity.meta.activity_type === 'click' && activity.meta.style != 'image'\" class=\"container-fluid\">\r\n        <ul class=\"clickActivity\">\r\n          <li\r\n            *ngFor=\"let option of activity.answers; let i = index\"\r\n            [ngClass]=\"activity.answers[i].selected ? 'clickSelected' : 'clickFalse'\"\r\n            >\r\n\r\n            <input\r\n              type=\"checkbox\"\r\n              [ngClass]=\"['d-none']\"\r\n              [id]=\"option.id\"\r\n              [value]=\"option.id\"\r\n              formControlName=\"answer\"\r\n              (click)=\"updateSelections(i)\"\r\n              >\r\n\r\n            <label class=\"handy text-left px-3\"\r\n              [innerHtml]=\"option.caption\"\r\n              [for]=\"option.id\"\r\n            >\r\n            </label>\r\n\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div *ngIf=\"activity.meta.activity_type === 'click' && activity.meta.style === 'image'\" class=\"container-fluid\">\r\n        <span *ngFor=\"let option of activity.answers; let i = index\">\r\n          <input\r\n            type=\"radio\"\r\n            [id]=\"option.id\"\r\n            [value]=\"option.id\"\r\n            formControlName=\"answer\"\r\n            style=\"display:none;\"\r\n          >\r\n          <label [for]=\"option.id\">\r\n            <img\r\n              [ngClass]=\"activity.answers[i].selected ? 'imgSelected' : 'imgFalse'\"\r\n              [src]=\"option.caption.src\"\r\n              [alt]=\"option.caption.alt\"\r\n              type=\"button\"\r\n              class=\"click-img mr-2 mt-2\"\r\n              (click)=\"updateSelections(i, true)\"\r\n            >\r\n          </label>\r\n        </span>\r\n      </div>\r\n\r\n  </div>\r\n</form>\r\n","import { Component, Input, OnInit } from '@angular/core'\r\nimport { UntypedFormBuilder, Validators } from '@angular/forms'\r\nimport { ActiveModeService } from './active-mode.service'\r\nimport { UserService } from '../../../../../core/services/user/user.service'\r\nimport { Activity } from '../models/activity.model'\r\n\r\n@Component({\r\n  selector: 'app-active-mode',\r\n  templateUrl: './active-mode.component.html',\r\n  styleUrls: ['./active-mode.component.scss']\r\n})\r\nexport class ActiveModeComponent implements OnInit {\r\n\r\n  @Input() activity: Activity\r\n\r\n  constructor(\r\n    public fb: UntypedFormBuilder,\r\n    public user: UserService,\r\n    public activeModeService: ActiveModeService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    const answerValidators = {\r\n      radio: ['', Validators.required],\r\n      checkbox: [''], // Dec 22, 2020: This can be removed?\r\n      text: [this.activity.default_answer, Validators.compose([\r\n        Validators.required, Validators.minLength(1)\r\n      ])],\r\n      textarea: [this.activity.default_answer, Validators.compose([\r\n        Validators.required, Validators.minLength(3)\r\n      ])]\r\n    }\r\n    let validator = (this.activity.meta.style == 'image') ? 'radio' : this.activity.meta.activity_type\r\n    this.activeModeService.activityForm = this.fb.group({\r\n      answer: answerValidators[validator]\r\n    })\r\n  }\r\n\r\n  updateSelections(i, singleSelection?: boolean) {\r\n    if (singleSelection) {\r\n      for (let y = 0; y < this.activity.answers.length; y++) {\r\n        // deselect all previous selections\r\n        this.activity.answers[y].selected = false\r\n      }\r\n      this.activity.answers[i].selected = true\r\n    } else {\r\n      this.activity.answers[i].selected = !this.activity.answers[i].selected\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"pr-lg-4 pr-md-1 pr-sm-0\"\r\n  *ngIf=\"this.selectedCourseService.selectedActivitySet$ | async as activity\"\r\n  >\r\n  <div [@FadeInOut2]=\"this.activitiesService.endOfChapter || this.activitiesService.endOfCourse || activity\">\r\n    <div *ngIf=\"!this.activitiesService.endOfChapter && !this.activitiesService.endOfCourse; else eo\">\r\n      <button class=\"btn btn-primary mr-3\"\r\n        (click)=\"calcFollowingAid(-1)\"\r\n        [disabled]=\"this.activitiesService.waitingForApi || activity[activity.length -1].meta.seq == 1\"\r\n        >\r\n        <fa-icon [icon]=\"faStepBackward\"></fa-icon>\r\n      </button>\r\n\r\n      <button type=\"button\" class=\"btn btn-primary\"\r\n        *ngIf=\"activity[activity.length -1].user_answers\"\r\n        (click)=\"calcFollowingAid(1)\"\r\n        [disabled]=\"this.activitiesService.waitingForApi\"\r\n        >\r\n        NEXT\r\n        <fa-icon [icon]=\"faStepForward\" class=\"mr-2 ml-1\"></fa-icon>\r\n      </button>\r\n\r\n      <button type=\"submit\" class=\"btn btn-success\"\r\n        *ngIf=\"!activity[activity.length -1].user_answers\"\r\n        (click)=\"SaveButton()\"\r\n        [disabled]=\"this.activitiesService.waitingForApi || !this.activeModeService.activityForm.valid\"\r\n        >\r\n        {{ activity[activity.length -1].meta.activity_type === 'info' || activity[activity.length -1].meta.activity_type === 'special' ? 'MARK READ' : 'SAVE' }}\r\n        <fa-icon\r\n          class=\"ml-2 mr-1 fa-regular\"\r\n          [icon]=\"activity[activity.length -1].meta.activity_type === 'info' ? faCheck : faPenNib\"\r\n          [ngClass]=\"this.activeModeService.activityForm.valid ? 'fa-fade' : ''\"\r\n          style=\"--fa-animation-duration: 2s\"\r\n        ></fa-icon>\r\n      </button>\r\n    </div>\r\n\r\n    <ng-template #eo>\r\n      <button\r\n        *ngIf=\"this.activitiesService.endOfChapter\"\r\n        [disabled]=\"this.activitiesService.waitingForApi\"\r\n        (click)=\"ContinueButton()\"\r\n        class=\"btn btn-primary\"\r\n      >\r\n        CONTINUE\r\n        <fa-icon [icon]=\"faStepForward\" class=\"ml-2 mr-1\"></fa-icon>\r\n      </button>\r\n\r\n      <button\r\n        *ngIf=\"this.activitiesService.endOfCourse\"\r\n        [disabled]=\"this.activitiesService.waitingForApi\"\r\n        (click)=\"ReviewButton()\"\r\n        class=\"btn btn-primary\"\r\n      >\r\n        REVIEW\r\n        <fa-icon [icon]=\"faStepForward\" class=\"ml-2 mr-1\"></fa-icon>\r\n      </button>\r\n    </ng-template>\r\n  </div>\r\n</div>\r\n","import { Component } from '@angular/core'\r\nimport { faStepBackward, faCheck, faStepForward, faPenNib } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// WNGX services\r\nimport { NavService } from './nav.service'\r\nimport { ActiveModeService } from '../active-mode/active-mode.service'\r\nimport { SelectedCourseService } from 'src/app/core/services/selected-course/selected-course.service'\r\nimport { ActivitiesService } from '../../activities.service'\r\n\r\nimport { ActivityMeta } from '../models/activity-meta.model'\r\nimport { Activity } from '../models/activity.model'\r\nimport { FadeInOut2 } from 'src/app/core/animations/fade-in-out-2.animation'\r\n\r\n@Component({\r\n  selector: 'app-nav',\r\n  templateUrl: './nav.component.html',\r\n  styleUrls: ['./nav.component.sass'],\r\n  animations: [FadeInOut2]\r\n})\r\n\r\nexport class NavComponent {\r\n\r\n  get activitySet() { return this.activitiesService.activities }\r\n\r\n  private nextAid: number\r\n\r\n  // FontAwesome icons\r\n  faStepBackward = faStepBackward\r\n  faCheck = faCheck\r\n  faStepForward = faStepForward\r\n  faPenNib = faPenNib\r\n\r\n  constructor(\r\n    public navService: NavService,\r\n    public activitiesService: ActivitiesService,\r\n    public activeModeService: ActiveModeService,\r\n    public selectedCourseService: SelectedCourseService\r\n  ) { }\r\n\r\n  SaveButton() {\r\n    this.activitiesService.waitingForApi = true\r\n    this.activeModeService.userAnswerPOST(\r\n      this.activeModeService.extractAnswers()\r\n    )\r\n  }\r\n\r\n  calcFollowingAid(offset: number) {\r\n    // Offset should be 1 for next activity, -1 for previous activity\r\n\r\n    // For previous activity, the first in the current set interests us.\r\n    // For next activity, it's the current set's last activity we want.\r\n    let calcStartActivity: Activity =\r\n      (offset === 1) ? this.activitySet[this.activitySet.length - 1] : this.activitySet[0]\r\n\r\n    // seq = jump point activity's index position in the course syllabus\r\n    let seq: number = this.selectedCourseService.courseSyllabus.findIndex(\r\n      (activityMeta: ActivityMeta) => {\r\n        if (activityMeta.activity_id === calcStartActivity.meta.activity_id) return true\r\n      }\r\n    )\r\n\r\n    if (seq === this.selectedCourseService.courseSyllabus.length-1) {\r\n      this.activitiesService.endOfCourse = true\r\n    } else {\r\n      var activityMeta: ActivityMeta = this.selectedCourseService.courseSyllabus[seq + offset]\r\n      if (activityMeta.chapter_id != this.selectedCourseService.courseSyllabus[seq].chapter_id) {\r\n        if (offset === 1) {\r\n          // Show next chapter screer only if user clicked Next button, not back button\r\n          this.activitiesService.endOfChapter = true\r\n          this.nextAid = activityMeta.activity_id\r\n        } else {\r\n          // When user clicks back button, proceed to previous activity from previous chapter\r\n          this.navService.NavigateByAid(activityMeta.activity_id)\r\n        }\r\n      } else {\r\n        this.navService.NavigateByAid(activityMeta.activity_id)\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  ContinueButton() {\r\n    this.navService.NavigateByAid(this.nextAid)\r\n  }\r\n\r\n  ReviewButton() {\r\n    this.navService.NavigateByAid(this.selectedCourseService.courseSyllabus[0].activity_id)\r\n  }\r\n\r\n}\r\n","import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber, counter: 0, period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, counter, period } = state;\n    subscriber.next(counter);\n    this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n","import * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, Directive, Input, EventEmitter, Optional, SkipSelf, Output, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport * as i3 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height,\n        x: clientRect.x,\n        y: clientRect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document) {\n        this._document = _document;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                // If there's a position constraint function, we want the element's top/left to be at the\n                // specific position on the page. Use the initial position as a reference if that's the case.\n                const offset = this.constrainPosition ? this._initialClientRect : this._pickupPositionOnPage;\n                const activeTransform = this._activeTransform;\n                activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n                activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        /** Handles a native `dragstart` event. */\n        this._nativeDragStart = (event) => {\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    event.preventDefault();\n                }\n            }\n            else if (!this.disabled) {\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n                // but some cases like dragging of links can slip through (see #24403).\n                event.preventDefault();\n            }\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.remove();\n        this._previewRef?.destroy();\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor = this._anchor || this._document.createComment(''));\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = this._createPreviewElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._initialClientRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialClientRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialClientRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialClientRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialClientRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': `${this._config.zIndex || 1000}`,\n        }, dragImportantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event ||\n                        (_getEventTarget(event) === this._preview && event.propertyName === 'transform')) {\n                        this._preview?.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialClientRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // ClientRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary ClientRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialClientRect;\n        }\n        return this._previewRect;\n    }\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    constructor(_element, _dragDropRegistry) {\n        this._element = _element;\n        this._dragDropRegistry = _dragDropRegistry;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /** Direction in which the list is oriented. */\n        this.orientation = 'vertical';\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            delta: 0,\n            overlaps: false,\n        };\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this._element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Function that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* AutoScrollVerticalDirection.UP */) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* AutoScrollVerticalDirection.DOWN */) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === 2 /* AutoScrollHorizontalDirection.RIGHT */) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n        this._sortStrategy = new SingleAxisSortStrategy(this.element, _dragDropRegistry);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._sortStrategy.direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        // TODO(crisbeto): eventually we should be constructing the new sort strategy here based on\n        // the new orientation. For now we can assume that it'll always be `SingleAxisSortStrategy`.\n        this._sortStrategy.orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect ||\n            !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = (shadowRoot || this._document);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* AutoScrollVerticalDirection.UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* AutoScrollVerticalDirection.DOWN */;\n    }\n    return 0 /* AutoScrollVerticalDirection.NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* AutoScrollHorizontalDirection.LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* AutoScrollHorizontalDirection.RIGHT */;\n    }\n    return 0 /* AutoScrollHorizontalDirection.NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n    let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* AutoScrollVerticalDirection.UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* AutoScrollVerticalDirection.UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* AutoScrollVerticalDirection.DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* AutoScrollHorizontalDirection.LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* AutoScrollHorizontalDirection.RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nDragDropRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable });\nDragDrop.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DragDrop, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nCdkDropListGroup.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkDropListGroup, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDropListGroupDisabled']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i3.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDropList.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkDropList, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n        // Prevent child drop lists from picking up the same group as their parent.\n        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n    ], exportAs: [\"cdkDropList\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: CdkDropListGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DROP_LIST_GROUP]\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }]; }, propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDropListDisabled']\n            }], sortingDisabled: [{\n                type: Input,\n                args: ['cdkDropListSortingDisabled']\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollDisabled']\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDragHandle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkDragHandle, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }]; }, propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDragHandleDisabled']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDragPlaceholder.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkDragPlaceholder, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() {\n        return this._matchSize;\n    }\n    set matchSize(value) {\n        this._matchSize = coerceBooleanProperty(value);\n    }\n}\nCdkDragPreview.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDragPreview.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkDragPreview, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: \"matchSize\" }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this._ngZone.runOutsideAngular(() => {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                this._updateRootElement();\n                this._setupHandlesListener();\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })?._dragRef || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles.changes\n            .pipe(startWith(this._handles), \n        // Sync the new handles with the DragRef.\n        tap((handles) => {\n            const childHandleElements = handles\n                .filter(handle => handle._parentDrag === this)\n                .map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                childHandleElements.push(this.element);\n            }\n            this._dragRef.withHandles(childHandleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => {\n                return item._stateChanges.pipe(startWith(item));\n            }));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n}\nCdkDrag._dragInstances = [];\nCdkDrag.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i3.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDrag.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkDrag, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], queries: [{ propertyName: \"_previewTemplate\", first: true, predicate: CDK_DRAG_PREVIEW, descendants: true }, { propertyName: \"_placeholderTemplate\", first: true, predicate: CDK_DRAG_PLACEHOLDER, descendants: true }, { propertyName: \"_handles\", predicate: CDK_DRAG_HANDLE, descendants: true }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DROP_LIST]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_HANDLE]\n                }] }, { type: CdkDrag, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }] }]; }, propDecorators: { _handles: [{\n                type: ContentChildren,\n                args: [CDK_DRAG_HANDLE, { descendants: true }]\n            }], _previewTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PREVIEW]\n            }], _placeholderTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PLACEHOLDER]\n            }], data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDragDisabled']\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nDragDropModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: DragDropModule, declarations: [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder], exports: [CdkScrollableModule,\n        CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder] });\nDragDropModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        CdkDropList,\n                        CdkDropListGroup,\n                        CdkDrag,\n                        CdkDragHandle,\n                        CdkDragPreview,\n                        CdkDragPlaceholder,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        CdkDropList,\n                        CdkDropListGroup,\n                        CdkDrag,\n                        CdkDragHandle,\n                        CdkDragPreview,\n                        CdkDragPlaceholder,\n                    ],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n","<!-- REVIEW MODE -->\r\n<div *ngIf=\"activity.user_answers; else activeMode\" @fadeInOut>\r\n  <div class=\"dnd container\">\r\n    <div *ngFor=\"let option of activity.answers; let i = index\" class=\"row row-{{i}}\">\r\n      <div\r\n        class=\"dnd-box dnd-col-0 dnd-static px-3 py-2 col mr-1 font-weight-bold\"\r\n        *ngIf=\"activity.meta.activity_type === 'dnd-match'\"\r\n        [innerHtml]=\"dndMatchDataStatic[i]\"\r\n      >\r\n      </div>\r\n      <div\r\n        [innerHtml]=\"(activity.meta.activity_type === 'dnd-match') ? option.caption.sortable : option.caption\"\r\n        class=\"dnd-box px-3 py-2 col dnd-col-1\"\r\n        [ngClass]=\"(markOrder) ? (option.correct === i) ? 'dnd-correct' : 'dnd-wrong' : ''\"\r\n      >\r\n      </div>\r\n    </div>\r\n    <div class=\"mt-2\">\r\n      <span class=\"mr-2\">Order:</span>\r\n      <div class=\"btn-group btn-group-toggle\" (click)=\"orderButtons($event)\">\r\n        <!-- !!! NOTE: Name property is used in orderButtons function. -->\r\n        <button\r\n          class=\"btn btn-info btn-sm py-0 active\"\r\n          type=\"button\"\r\n          name=\"yours\"\r\n          aria-pressed=\"true\"\r\n          (click)=\"this.dndService.showUserOrder(activity)\"\r\n        >Yours</button>\r\n        <button\r\n          class=\"btn btn-info btn-sm py-0\"\r\n          type=\"button\"\r\n          name=\"correct\"\r\n          (click)=\"showCorrectOrder()\"\r\n        >Correct</button>\r\n        <button\r\n          class=\"btn btn-info btn-sm py-0\"\r\n          type=\"button\"\r\n          name=\"initial\"\r\n          (click)=\"showInitialOrder()\"\r\n        >Initial</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- ACTIVE MODE -->\r\n<ng-template #activeMode>\r\n  <div cdkDropList (cdkDropListDropped)=\"drop($event)\" class=\"dnd dnd-active container\" @fadeInOut>\r\n    <div *ngFor=\"let option of activity.answers; let i = index\" class=\"row row-{{i}}\">\r\n      <div\r\n        class=\"dnd-box dnd-col-0 dnd-static px-3 py-2 col mr-1 font-weight-bold\"\r\n        *ngIf=\"activity.meta.activity_type === 'dnd-match'\"\r\n        [innerHtml]=\"dndMatchDataStatic[i]\"\r\n      >\r\n      </div>\r\n      <div\r\n        class=\"dnd-box dnd-col-1 px-3 py-2 col\"\r\n        cdkDrag\r\n        [innerHtml]=\"(activity.meta.activity_type === 'dnd-match') ? option.caption.sortable : option.caption\"\r\n      >\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core'\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop'\r\n\r\nimport { FadeInOut } from './../../../../../../core/animations/fade-in-out.animation'\r\nimport { Activity } from '../../models/activity.model'\r\nimport { DndService } from './dnd.service'\r\n\r\n@Component({\r\n  selector: 'app-dnd',\r\n  templateUrl: './dnd.component.html',\r\n  styleUrls: ['./dnd.component.scss'],\r\n  animations: [FadeInOut]\r\n})\r\nexport class DndComponent implements OnInit{\r\n\r\n  @Input() activity: Activity\r\n  @Output() activityChange = new EventEmitter<Activity>() // Return updated DnD order to parent, i.e. activeModeComponent\r\n  markOrder = true // Colour highlight right and wrong placed items\r\n  dndMatchDataStatic: string[] = []\r\n\r\n  constructor(\r\n    public dndService: DndService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    if (this.activity.meta.activity_type === 'dnd-match') {\r\n      // Break out static column's captions into dndMatchDataStatic.\r\n      // Prevents static column captions from following items moved in the sortable col.\r\n      this.activity.answers.forEach(answer => {\r\n        this.dndMatchDataStatic.push(answer.caption.static)\r\n      })\r\n    }\r\n    if (this.activity.user_answers) {\r\n      this.dndService.showUserOrder(this.activity)\r\n    }\r\n  }\r\n\r\n  drop(event: CdkDragDrop<Activity>) {\r\n    moveItemInArray(this.activity.answers, event.previousIndex, event.currentIndex)\r\n    this.activityChange.emit(this.activity)\r\n  }\r\n\r\n  showInitialOrder() {\r\n    this.activity.answers.sort((a,b)=>a.slot - b.slot) // Sort answers array by 'slot' property, ascending\r\n  }\r\n\r\n  showCorrectOrder() {\r\n    this.activity.answers.sort((a,b)=>a.correct - b.correct) // Sort answers array by 'correct' property, ascending\r\n  }\r\n\r\n  orderButtons($event){\r\n    // Toggles active button, and decides whether activity marking should be shown\r\n    let clickedElement = $event.target || $event.srcElement\r\n    this.markOrder = (clickedElement.name === 'yours') ? true : false;\r\n\r\n    if( clickedElement.nodeName === \"BUTTON\" ) {\r\n      let isCertainButtonAlreadyActive = clickedElement.parentElement.querySelector(\".active\");\r\n      // if a Button already has Class: .active\r\n      if( isCertainButtonAlreadyActive ) {\r\n        isCertainButtonAlreadyActive.classList.remove(\"active\");\r\n      }\r\n      clickedElement.className += \" active\";\r\n    }\r\n  }\r\n\r\n}\r\n","<!-- REVIEW MODE -->\r\n<div *ngIf=\"activity.user_answers; else activeMode\" @fadeInOut>\r\n  <div class=\"row\">\r\n    <div class=\"col\">\r\n      <ul class=\"clickActivity\">\r\n        <li\r\n          class=\"text-left px-3 clickFalse\"\r\n          *ngFor=\"let option of activity.answers; let i = index\"\r\n          [ngClass]=\"[markColours(option), checkIfCapsNeeded(i) ? 'text-capitalize' : '']\"\r\n          [innerHtml]=\"showLabel(option)\"\r\n        >\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n  <div class=\"mt-2 row\">\r\n    <div class=\"col\">\r\n      <span class=\"mr-2\">Punctuation:</span>\r\n      <div class=\"btn-group btn-group-toggle\">\r\n\r\n      <!-- <div class=\"btn-group btn-group-toggle\" (click)=\"orderButtons($event)\"> -->\r\n        <!-- !!! NOTE: Name property is used in orderButtons function. -->\r\n        <button\r\n          class=\"btn btn-info btn-sm py-0 active\"\r\n          type=\"button\"\r\n          name=\"yours\"\r\n          aria-pressed=\"true\"\r\n          (click)=\"showMarking('user')\"\r\n        >Yours</button>\r\n        <button\r\n          class=\"btn btn-info btn-sm py-0\"\r\n          type=\"button\"\r\n          name=\"correct\"\r\n          (click)=\"showMarking('correct')\"\r\n        >Correct</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- ACTIVE MODE -->\r\n<ng-template #activeMode>\r\n  <div class=\"row\">\r\n    <div class=\"col\">\r\n      <ul class=\"clickActivity\">\r\n        <li\r\n          *ngFor=\"let option of activity.answers; let i = index\"\r\n          [ngClass]=\"activity.answers[i].selected ? 'clickSelected' : 'clickFalse'\"\r\n          >\r\n          <input\r\n            type=\"checkbox\"\r\n            [ngClass]=\"['d-none']\"\r\n            [id]=\"option.id\"\r\n            [value]=\"option.id\"\r\n            formControlName=\"answer\"\r\n            (click)=\"updateSelections(i, option.id)\"\r\n          >\r\n          <label\r\n            [innerHtml]=\"showLabel(option)\"\r\n            [for]=\"option.id\"\r\n            [ngClass]=\"checkIfCapsNeeded(i) ? 'text-capitalize' : ''\"\r\n            class=\"handy text-left px-3\"\r\n          ></label>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n","import { Component, OnInit, Input } from '@angular/core'\r\nimport { FadeInOut } from '../../../../../../core/animations/fade-in-out.animation'\r\nimport { ActivityAnswers } from '../../models/activity-answers.model'\r\nimport { Activity } from '../../models/activity.model'\r\nimport { ClickRotateService } from './click-rotate.service'\r\n\r\n@Component({\r\n  selector: 'app-click-rotate',\r\n  templateUrl: './click-rotate.component.html',\r\n  styleUrls: ['./click-rotate.component.scss'],\r\n  animations: [FadeInOut]\r\n})\r\nexport class ClickRotateComponent implements OnInit {\r\n\r\n  @Input() activity: Activity\r\n  rotateItems = []\r\n  periodId: number\r\n  public colours: string\r\n  showMarkingType = \"user\"\r\n\r\n  constructor(\r\n    public clickRotateService: ClickRotateService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.clickRotateService.userSelections = (this.activity.user_answers) ? this.activity.user_answers : {}\r\n    this.rotateItems = JSON.parse(this.activity.assess_text)\r\n    // set id where puctuation mark is a period. used for setting text-capitalize class.\r\n    for (let y in this.rotateItems) {\r\n      if (this.rotateItems[y] === '.') {\r\n        this.periodId = parseInt(y)\r\n      }\r\n    }\r\n  }\r\n\r\n  updateSelections(i, aid) {\r\n    if (this.clickRotateService.userSelections[aid]) {\r\n      if (this.clickRotateService.userSelections[aid] == Object.keys(this.rotateItems).length) {\r\n        delete this.clickRotateService.userSelections[aid]\r\n        this.activity.answers[i].selected = false\r\n      } else {\r\n        this.clickRotateService.userSelections[aid]++\r\n      }\r\n    } else {\r\n      this.clickRotateService.userSelections[aid] = 1\r\n      this.activity.answers[i].selected = true\r\n    }\r\n  }\r\n\r\n  showLabel(option: ActivityAnswers) {\r\n    if (this.showMarkingType === 'user') {\r\n      return (this.clickRotateService.userSelections[option.id])\r\n        ? option.caption + this.rotateItems[this.clickRotateService.userSelections[option.id]]\r\n        : option.caption\r\n    } else {\r\n      return (option.correct === 0) ? option.caption : option.caption + this.rotateItems[option.correct]\r\n    }\r\n  }\r\n\r\n  checkIfCapsNeeded(i: number) {\r\n    if (i === 0) {\r\n      return false\r\n    } else {\r\n      let previousAnswer: ActivityAnswers = this.activity.answers[--i]\r\n      if (this.activity.user_answers) {\r\n        return (previousAnswer.correct === this.periodId) ? true : false\r\n      } else {\r\n        return (\r\n          this.clickRotateService.userSelections[previousAnswer.id] &&\r\n          this.clickRotateService.userSelections[previousAnswer.id] === this.periodId\r\n        ) ? true : false\r\n      }\r\n    }\r\n  }\r\n\r\n  markColours(answer: ActivityAnswers) {\r\n    if (this.showMarkingType === 'user') {\r\n      if (answer.correct !== 0 && !this.clickRotateService.userSelections[answer.id]) {\r\n        this.colours = 'clickMissed'\r\n      } else if (answer.correct !==0 && this.clickRotateService.userSelections[answer.id] == answer.correct) {\r\n        this.colours = 'clickCorrect'\r\n      } else if (\r\n        answer.correct !==0 && this.clickRotateService.userSelections[answer.id] != answer.correct\r\n      ||answer.correct ===0 && this.clickRotateService.userSelections[answer.id]\r\n      ) {\r\n        this.colours = 'clickWrong'\r\n      } else {\r\n        this.colours = 'clickFalse'\r\n      }\r\n    } else if (this.showMarkingType === 'correct') {\r\n      this.colours = (answer.correct !== 0) ? 'clickCorrect' : 'clickFalse'\r\n    }\r\n    return this.colours\r\n  }\r\n\r\n  showMarking(type: string) {\r\n    this.showMarkingType = (type === 'user') ? 'user' : 'correct'\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http'\r\nimport { Injectable } from '@angular/core'\r\n\r\n// WNGX services\r\nimport { ConfigService } from 'src/app/core/services/config/config.service'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DemoFlagService {\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private configService: ConfigService\r\n  ) { }\r\n\r\n  saveActivityDemoStatus(aid: number) {\r\n    this.httpClient.put<number>(\r\n      `${this.configService.params.api.route}/admin/publisher/course-editor/syllabus/${aid}/demo`, aid\r\n    ).subscribe(\r\n      (response) => { console.log(response) },\r\n      (err) => { console.log(err) }\r\n    )\r\n  }\r\n\r\n}\r\n","import { Component, Input } from '@angular/core'\r\nimport { DemoFlagService } from './demo-flag.service'\r\nimport { Activity } from '../../../activities/workarea/models/activity.model'\r\n\r\n@Component({\r\n  selector: 'app-demo-flag',\r\n  templateUrl: './demo-flag.component.html',\r\n  styleUrls: ['./demo-flag.component.sass']\r\n})\r\nexport class DemoFlagComponent {\r\n\r\n  @Input() firstActivity: Activity\r\n\r\n  constructor(\r\n    private demoFlagService: DemoFlagService\r\n  ) { }\r\n\r\n  activityDemoFlagToggle() {\r\n    this.demoFlagService.saveActivityDemoStatus(this.firstActivity.meta.activity_id)\r\n  }\r\n\r\n}\r\n","<div class=\"text-right text-secondary mr-5\">\r\n  <form #demoActivity=\"ngForm\">\r\n    <div class=\"form-check my-auto\">\r\n      <label class=\"form-check-label user-select-none font-weight-light\" for=\"demoActivityCheck\">\r\n        Make this <span class=\"font-weight-normal\">Activity Set<br></span>\r\n        part of a free <span class=\"font-weight-normal\">Demo Course</span>\r\n      </label>\r\n      <input\r\n        type=\"checkbox\"\r\n        class=\"form-check-input ml-3 mt-3\"\r\n        name=\"demoActivityCheck\"\r\n        id=\"demoActivityCheck\"\r\n        (ngModelChange)=\"activityDemoFlagToggle()\"\r\n        [ngModel]=\"firstActivity.meta.demo\"\r\n        >\r\n    </div>\r\n  </form>\r\n</div>\r\n","<div *ngIf=\"this.beforeAfter$ | async as beforeAfter\">\r\n  <p>Your before and after results for the pre and after course assessment are below.</p>\r\n  <table class=\"table table-striped table-sm\" style=\"max-width: 40rem;\">\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\"></th>\r\n        <th scope=\"col\" class=\"text-center\">Correct</th>\r\n        <th scope=\"col\" class=\"text-center\">Wrong</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr>\r\n        <th scope=\"row\">Before</th>\r\n        <td class=\"text-center\">\r\n          <span class=\"text-success\">{{beforeAfter.before.correct}}</span>\r\n          <span class=\"text-dark\"> / {{beforeAfter.before.total}}</span>\r\n        </td>\r\n        <td class=\"text-center text-danger\">{{beforeAfter.before.wrong}}</td>\r\n      </tr>\r\n      <tr>\r\n        <th scope=\"row\">After</th>\r\n        <td class=\"text-center\">\r\n          <span class=\"text-success\">{{beforeAfter.after.correct}}</span>\r\n          <span class=\"text-dark\"> / {{beforeAfter.after.total}}</span>\r\n        </td>\r\n        <td class=\"text-center text-danger\">{{beforeAfter.after.wrong}}</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n","import { Component, Input, OnInit } from '@angular/core'\r\nimport { HttpClient } from '@angular/common/http'\r\nimport { Observable } from 'rxjs'\r\n\r\n// WNGX imports\r\nimport { Activity } from '../../../models/activity.model'\r\nimport { ConfigService } from 'src/app/core/services/config/config.service'\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\r\n\r\n@Component({\r\n  selector: 'app-before-and-after',\r\n  templateUrl: './before-and-after.component.html',\r\n  styleUrls: ['./before-and-after.component.sass']\r\n})\r\nexport class BeforeAndAfterComponent implements OnInit {\r\n\r\n  @Input() activity: Activity\r\n\r\n  faSpinner = faSpinner\r\n\r\n  public beforeAfter$: Observable<any>\r\n  public awaitingStats = false\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private configService: ConfigService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.beforeAfter$ = this.beforeAfter()\r\n  }\r\n\r\n  beforeAfter() {\r\n    return this.httpClient.get(this.url).pipe(data => data)\r\n  }\r\n\r\n  get url() {\r\n    return `${this.configService.params.api.route}/webcourse/activities/special/before-and-after/${this.activity.id}`\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http'\r\nimport { Injectable } from '@angular/core'\r\nimport { ConfigService } from 'src/app/core/services/config/config.service'\r\nimport { SelectedCourseService } from 'src/app/core/services/selected-course/selected-course.service'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class CompletionCertService {\r\n\r\n  public downloadCertificateLoading = false\r\n\r\n  constructor(\r\n    public selectedCourse: SelectedCourseService,\r\n    private httpClient: HttpClient,\r\n    private configService: ConfigService\r\n  ) { }\r\n\r\n  downloadCertificate(aid: number) {\r\n    this.downloadCertificateLoading = true\r\n\r\n    this.httpClient.get(\r\n      `${this.configService.params.api.route}/webcourse/activities/special/completion-cert/${aid}`,\r\n      {responseType: 'blob' as 'json'}\r\n    ).subscribe(\r\n      (response: any) => {\r\n        this.downloadCertificateLoading = false\r\n        const dataType = response.type\r\n        const binaryData = []\r\n        binaryData.push(response)\r\n        const downloadLink = document.createElement('a')\r\n        downloadLink.href = window.URL.createObjectURL(\r\n          new Blob(binaryData, {type: dataType})\r\n        )\r\n        const fileName = 'certificate.pdf'\r\n        if (fileName) {\r\n          downloadLink.setAttribute('download', fileName)\r\n        }\r\n        document.body.appendChild(downloadLink)\r\n        downloadLink.click()\r\n      },\r\n      (err) => {\r\n        console.log(err)\r\n      }\r\n    )\r\n\r\n  }\r\n}\r\n","<div id=\"completion-certificate\" class=\"text-center\">\r\n\r\n  <button class=\"btn btn-primary mt-1 mb-2\"\r\n    [disabled]=\"this.completionCertService.downloadCertificateLoading ? true : false\"\r\n    (click)=\"downloadCertificateBtn(activity.id)\"\r\n  >\r\n\r\n    <span *ngIf=\"!this.completionCertService.downloadCertificateLoading; else preparing\">\r\n      <fa-icon [icon]=\"faFileArrowDown\" class=\"mr-3\"></fa-icon>\r\n      Download <span class=\"small font-weight-light\">(PDF)</span>\r\n    </span>\r\n\r\n    <ng-template #preparing>\r\n      <fa-icon [icon]=\"faSpinner\" [spin]=\"true\" [pulse]=\"true\"></fa-icon>\r\n    </ng-template>\r\n  </button>\r\n\r\n</div>\r\n","import { Component, Input } from '@angular/core'\r\nimport { CompletionCertService } from './completion-cert.service'\r\nimport { faSpinner, faFileArrowDown } from '@fortawesome/free-solid-svg-icons'\r\nimport { Activity } from '../../../models/activity.model'\r\n\r\n@Component({\r\n  selector: 'app-completion-cert',\r\n  templateUrl: './completion-cert.component.html',\r\n  styleUrls: ['./completion-cert.component.scss']\r\n})\r\nexport class CompletionCertComponent {\r\n\r\n  @Input() activity: Activity\r\n\r\n  faSpinner = faSpinner\r\n  faFileArrowDown = faFileArrowDown\r\n\r\n  constructor(\r\n    public completionCertService: CompletionCertService\r\n  ) { }\r\n\r\n  downloadCertificateBtn(aid: number) {\r\n    this.completionCertService.downloadCertificate(aid)\r\n  }\r\n}\r\n","<app-before-and-after\r\n  *ngIf=\"activity.meta.style === 'before-and-after'\"\r\n  [activity]=\"activity\"\r\n></app-before-and-after>\r\n\r\n<app-completion-cert\r\n  *ngIf=\"activity.meta.style === 'completion-cert'\"\r\n  [activity]=\"activity\"\r\n></app-completion-cert>\r\n","import { Component, OnInit, Input } from '@angular/core'\r\nimport { Activity } from '../../models/activity.model'\r\n\r\n@Component({\r\n  selector: 'app-special-activity',\r\n  templateUrl: './special-activity.component.html',\r\n  styleUrls: ['./special-activity.component.sass']\r\n})\r\nexport class SpecialActivityComponent implements OnInit {\r\n\r\n  @Input() activity: Activity\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http'\r\nimport { Injectable } from '@angular/core'\r\nimport { ConfigService } from 'src/app/core/services/config/config.service'\r\nimport { Bookmark } from './bookmark.model'\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BookmarksService {\r\n\r\n  public bookmarksSubject: BehaviorSubject<any[]> = new BehaviorSubject([])\r\n  public bookmarks$: Observable<Bookmark[]> = this.bookmarksSubject.asObservable()\r\n  public deletedBookmarkAid$ = new Subject<number>\r\n\r\n  public selectedBookmark: Bookmark[]\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private configService: ConfigService\r\n  ) { }\r\n\r\n  getBookmarks(cid: number) {\r\n    this.httpClient.get<Bookmark[]>(\r\n      `${this.configService.params.api.route}/webcourse/activities/bookmarks?cid=${cid}`\r\n    ).subscribe(\r\n      (bookmarks) => {\r\n        this.bookmarksSubject.next(bookmarks)\r\n      }\r\n    )\r\n  }\r\n\r\n  deleteBookmark(aid: number): Observable<any> {\r\n    return this.httpClient.delete(\r\n      `${this.configService.params.api.route}/webcourse/activities/bookmarks/${aid}`\r\n    )\r\n  }\r\n\r\n  addBookmark(aid: number): Observable<any> {\r\n    return this.httpClient.post(\r\n      `${this.configService.params.api.route}/webcourse/activities/bookmarks`, {aid: aid}\r\n    )\r\n  }\r\n}\r\n","<div role=\"button\" class=\"my-3 text-dark text-uppercase\">\r\n  <div *ngIf=\"!firstActivity.bookmark\" (click)=\"addBookmarkBtn()\">\r\n    <i class=\"fa-regular fa-bookmark\"></i>\r\n    <span class=\"ml-2\">Bookmark</span>\r\n  </div>\r\n\r\n  <div *ngIf=\"firstActivity.bookmark\" (click)=\"deleteBookmarkBtn()\">\r\n    <i class=\"fa-solid fa-bookmark text-primary\"></i>\r\n    <span class=\"ml-2\">Bookmarked</span>\r\n  </div>\r\n</div>\r\n","import { Component, Input, OnInit, OnDestroy } from '@angular/core'\r\nimport { Subscription } from 'rxjs'\r\n\r\n// WNGX imports\r\nimport { BookmarksService } from 'src/app/pages/webcourse/activities/sidebar/bookmarks/bookmarks.service'\r\nimport { SelectedCourseService } from 'src/app/core/services/selected-course/selected-course.service'\r\nimport { Activity } from 'src/app/pages/webcourse/activities/workarea/models/activity.model'\r\nimport { Bookmark } from 'src/app/pages/webcourse/activities/sidebar/bookmarks/bookmark.model'\r\n\r\n@Component({\r\n  selector: 'app-bookmark-button',\r\n  templateUrl: './bookmark-button.component.html',\r\n  styleUrls: ['./bookmark-button.component.scss']\r\n})\r\n\r\nexport class BookmarkButtonComponent implements OnInit, OnDestroy {\r\n\r\n  @Input() firstActivity: Activity\r\n  private sub: Subscription\r\n\r\n  constructor(\r\n    public bookmarksService: BookmarksService,\r\n    public selectedCourseService: SelectedCourseService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.sub = this.bookmarksService.deletedBookmarkAid$.subscribe(\r\n      (aid) => {\r\n        if (this.firstActivity.meta.activity_id === aid) {\r\n          this.firstActivity.bookmark = null\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  deleteBookmarkBtn(): void {\r\n    this.bookmarksService.deleteBookmark(\r\n      this.firstActivity.meta.activity_id\r\n    ).subscribe( () => {\r\n        this.firstActivity.bookmark = null\r\n        this.updateSidebarBookmarksTabOnDelete(this.existingBookmarks)\r\n    })\r\n  }\r\n\r\n  addBookmarkBtn(): void {\r\n    this.bookmarksService.addBookmark(\r\n      this.firstActivity.meta.activity_id\r\n    ).subscribe(\r\n      (bookmark) => {\r\n        this.firstActivity.bookmark = bookmark\r\n        this.updateSidebarBookmarksTabOnAdd(bookmark)\r\n      }\r\n    )\r\n  }\r\n\r\n  updateSidebarBookmarksTabOnAdd(bookmark: Bookmark): void {\r\n    this.bookmarksService.bookmarksSubject.next(\r\n      [...this.existingBookmarks, bookmark]\r\n    )\r\n  }\r\n\r\n  updateSidebarBookmarksTabOnDelete(existingBookmarks: Bookmark[]): void {\r\n    let i = existingBookmarks.findIndex( bookmark => {\r\n      // For nice fade effects on delete, bookmarks.delete = true is set instead true delete.\r\n      // When user clicks bookmark tab repeatedly, the same bookmark will be present multiple times.\r\n      // The if !bookmark.deleted ensures findIndex finds the active bookmark\r\n      if (!bookmark.deleted) {\r\n        return bookmark.aid === this.firstActivity.meta.activity_id\r\n      }\r\n    })\r\n\r\n    // If no matching bookmark is found, i will be -1\r\n    if (i !== -1) {\r\n      existingBookmarks[i].deleted = true\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe()\r\n  }\r\n\r\n  get existingBookmarks() {\r\n    return this.bookmarksService.bookmarksSubject.value\r\n  }\r\n}\r\n","<div class=\"text-center eoch-container\" @fadeInOut>\r\n  <p class=\"font-weight-bold\">End of chapter.</p>\r\n\r\n  <div *ngIf=\"this.courseChapterIndexService.nextChapter as nc\" class=\"next-chapter\" @fadeInOut>\r\n    <p class=\"h5 next-chapter-label\">Next Chapter</p>\r\n    <p class=\"h4\" [innerHtml]=\"nc.label\"></p>\r\n  </div>\r\n</div>\r\n","import { Component } from '@angular/core'\r\n\r\n// WNGX imports\r\nimport { SelectedCourseService } from 'src/app/core/services/selected-course/selected-course.service'\r\nimport { FadeInOut } from 'src/app/core/animations/fade-in-out.animation'\r\nimport { CourseChapterIndexService } from 'src/app/core/services/course-chapter-index/course-chapter-index.service'\r\n\r\n@Component({\r\n  selector: 'app-chapter-end',\r\n  templateUrl: './chapter-end.component.html',\r\n  styleUrls: ['./chapter-end.component.scss'],\r\n  animations: [FadeInOut]\r\n})\r\nexport class ChapterEndComponent {\r\n\r\n  constructor(\r\n    public courseChapterIndexService: CourseChapterIndexService,\r\n    public selectedCourseService: SelectedCourseService,\r\n  ) { }\r\n\r\n}\r\n","import { Component } from '@angular/core'\r\n\r\n// WNGX models and misc\r\nimport { FadeInOut } from '../../../../../../core/animations/fade-in-out.animation'\r\n\r\n@Component({\r\n  selector: 'app-course-end',\r\n  templateUrl: './course-end.component.html',\r\n  styleUrls: ['./course-end.component.scss'],\r\n  animations: [FadeInOut]\r\n})\r\nexport class CourseEndComponent {\r\n\r\n  constructor() { }\r\n\r\n}\r\n","<div class=\"text-center eoc-container\" @fadeInOut>\r\n  <p class=\"text-uppercase font-weight-bold\">Congratulations!</p>\r\n  <p>You've completed the course.</p>\r\n</div>\r\n","<app-chapter-end *ngIf=\"this.activitiesService.endOfChapter\"></app-chapter-end>\r\n<app-course-end *ngIf=\"this.activitiesService.endOfCourse && !this.activitiesService.endOfChapter\"></app-course-end>\r\n\r\n<div *ngIf=\"!this.activitiesService.endOfChapter && !this.activitiesService.endOfCourse\">\r\n\r\n  <div class=\"container pb-3\">\r\n    <div\r\n      *ngIf=\"this.selectedCourseService.selectedActivitySet$ | async as activitySet\"\r\n      class=\"row justify-content-between my-3\"\r\n    >\r\n      <div class=\"col\">\r\n        <app-bookmark-button [firstActivity]=\"activitySet[0]\"></app-bookmark-button>\r\n      </div>\r\n      <div class=\"col\">\r\n        <!-- \"Make activity part of demo\" checkbox (publishers only)  -->\r\n        <div *ngIf=\"this.selectedCourseService.selectedCourse as selectedCourse\">\r\n          <app-demo-flag\r\n            [firstActivity]=\"activitySet[0]\"\r\n            *ngIf=\"selectedCourse.publisher.owner_uid === this.userService.user.id\"\r\n          ></app-demo-flag>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"container\" *ngIf=\"this.activitiesService.activities\" id=\"workarea-activities\">\r\n\r\n    <div *ngFor=\"let activity of this.activitiesService.activities\" class=\"row activity mt-4\" @fadeInOut>\r\n\r\n      <div\r\n        [id]=\"'activity' + activity.meta.activity_id\"\r\n        [ngClass]=\"(activity.user_answers) ? 'reviewModeActivity' : 'activeModeActivity'\"\r\n        class=\"col\"\r\n      >\r\n\r\n        <!--!!!!!!!!!!!!!!!\r\n            ngIf is required on activity.* so 'Fringe' browser doesn't show nulls\r\n            !!!!!!!!!!!!!!! -->\r\n\r\n        <div *ngIf=\"activity.prequestion\" [innerHTML]=\"activity.prequestion | safehtml: 'html'\" class=\"prequestion mb-3\"></div>\r\n        <div *ngIf=\"activity.question\" [innerHTML]=\"activity.question | safehtml: 'html'\" class=\"question mb-3 mt-4 h5\"></div>\r\n        <!-- click2 type's assess-text holds punctuation mark data in json format -->\r\n        <div\r\n          *ngIf=\"activity.assess_text && activity.meta.activity_type != 'click2' && activity.meta.activity_type != 'click'\"\r\n          [innerHtml]=\"activity.assess_text | safehtml: 'html'\"\r\n          class=\"assess_text mb-4\"\r\n        ></div>\r\n\r\n        <div *ngIf=\"\r\n          activity.meta.activity_type === 'dnd' ||\r\n          activity.meta.activity_type === 'dnd-match' ||\r\n          activity.meta.activity_type === 'click2';\r\n          else bulkActivities\r\n        \">\r\n          <app-dnd *ngIf=\"activity.meta.activity_type === 'dnd'  || activity.meta.activity_type === 'dnd-match'\" [activity]=\"activity\"></app-dnd>\r\n          <app-click-rotate *ngIf=\"activity.meta.activity_type === 'click2'\" [activity]=\"activity\"></app-click-rotate>\r\n        </div>\r\n\r\n        <ng-template #bulkActivities>\r\n          <app-review-mode *ngIf=\"activity.user_answers\" [activity]=\"activity\"></app-review-mode>\r\n          <app-active-mode *ngIf=\"!activity.user_answers\" [activity]=\"activity\"></app-active-mode>\r\n        </ng-template>\r\n\r\n        <app-special-activity *ngIf=\"activity.meta.activity_type === 'special'\" [activity]=\"activity\"></app-special-activity>\r\n\r\n        <div class=\"after_word alert alert-primary mt-4\"\r\n          *ngIf=\"activity.after_word\"\r\n          [innerHTML]=\"activity.after_word | safehtml: 'html'\"\r\n          @fadeInOut\r\n          >\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n\r\n<nav class=\"fixed-bottom d-print-none\" id=\"activity-nav-bar\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-5 d-none d-lg-block\">\r\n        <!-- This area is hidden under the activity sidebar -->\r\n      </div>\r\n      <div class=\"col-lg-7 my-auto\">\r\n\r\n        <div class=\"container-fluid\">\r\n          <div class=\"row justify-content-between\">\r\n            <div class=\"col-auto my-auto\">\r\n              <div class=\"handy\" (click)=\"printButton()\">\r\n                <fa-icon [icon]=\"faPrint\" class=\"text-secondary mx-2\"></fa-icon>\r\n                <span class=\"text-dark h6\">Print</span>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-auto my-auto text-center\">\r\n              <fa-icon [icon]=\"faSpinner\" [spin]=\"true\" [pulse]=\"true\" class=\"ml-2 mr-1 text-dark fa-fade\" size=\"2x\" *ngIf=\"this.activitiesService.waitingForApi\"></fa-icon>\r\n            </div>\r\n            <div class=\"col-auto\">\r\n              <div class=\"my-2\">\r\n                <app-nav class=\"my-2\"></app-nav>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n","import { Component } from '@angular/core'\r\nimport { faPrint, faSpinner } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// WNGX services\r\nimport { SelectedCourseService } from 'src/app/core/services/selected-course/selected-course.service'\r\nimport { UserService } from 'src/app/core/services/user/user.service'\r\nimport { ActivitiesService } from '../activities.service'\r\n\r\n//WNGX models and misc\r\nimport { FadeInOut } from './../../../../core/animations/fade-in-out.animation'\r\n\r\n\r\n@Component({\r\n  selector: 'app-workarea',\r\n  templateUrl: './workarea.component.html',\r\n  styleUrls: ['./workarea.component.scss'],\r\n  animations: [FadeInOut]\r\n})\r\n\r\nexport class WorkAreaComponent {\r\n\r\n  public faPrint = faPrint\r\n  public faSpinner = faSpinner\r\n\r\n  constructor(\r\n    public selectedCourseService: SelectedCourseService,\r\n    public userService: UserService,\r\n    public activitiesService: ActivitiesService\r\n  ) {}\r\n\r\n  printButton() {\r\n    window.print()\r\n  }\r\n}\r\n","<div id=\"publisher-info-tab\" class=\"px-4\"\r\n  *ngIf=\"this.selectedCourseService.selectedCourse as sc; else loading\"\r\n  @fadeInOut\r\n  >\r\n\r\n  <div class=\"container-fluid my-3\">\r\n\r\n    <!-- Publisher Name -->\r\n    <div class=\"row\">\r\n      <div class=\"col mt-3 h5 primary-text\" [innerHtml]=\"sc.publisher.name\"></div>\r\n    </div>\r\n\r\n    <!-- Contact and email address -->\r\n    <div class=\"row py-2\">\r\n      <div class=\"col-1 mx-auto\">\r\n        <fa-icon [icon]=\"faEnvelope\" class=\"primary-text\"></fa-icon>\r\n      </div>\r\n      <div class=\"col\">\r\n        <div class=\"primary-text\">\r\n          {{ sc.publisher.contact_fname }}\r\n          {{ sc.publisher.contact_lname }}\r\n        </div>\r\n        <a target=\"_blank\"\r\n          [href]=\"'mailto:' + sc.publisher.contact_email\"\r\n          *ngIf=\"sc.publisher.contact_email\"\r\n          >\r\n          {{ sc.publisher.contact_email }}\r\n        </a>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Hotlinked website address -->\r\n    <div class=\"row py-2\" *ngIf=\"sc.publisher.website\">\r\n      <div class=\"col-1 mx-auto\"><fa-icon [icon]=\"faGlobe\" class=\"primary-text\"></fa-icon></div>\r\n      <div class=\"col\">\r\n        <div class=\"primary-text\">Website</div>\r\n        <a target=\"_blank\" [href]=\"sc.publisher.website\">\r\n          {{ sc.publisher.website.replace('https://', '')}}\r\n        </a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n\r\n<ng-template #loading>\r\n  <div class=\"mt-5\">\r\n    <app-loading-spinner></app-loading-spinner>\r\n  </div>\r\n</ng-template>\r\n","import { faGlobe, faEnvelope } from '@fortawesome/free-solid-svg-icons'\r\nimport { Component } from '@angular/core'\r\n\r\nimport { SelectedCourseService } from 'src/app/core/services/selected-course/selected-course.service'\r\nimport { FadeInOut } from '../../../../../core/animations/fade-in-out.animation'\r\n\r\n@Component({\r\n  selector: 'app-publisher-info',\r\n  templateUrl: './publisher-info.component.html',\r\n  styleUrls: ['./publisher-info.component.sass'],\r\n  animations: [FadeInOut]\r\n})\r\nexport class PublisherInfoComponent {\r\n\r\n  faGlobe = faGlobe\r\n  faEnvelope = faEnvelope\r\n\r\n  constructor(\r\n    public selectedCourseService: SelectedCourseService\r\n  ) { }\r\n\r\n}\r\n","<!-- Displays an hotlinked array of chapter activity bars on progress, chapter index tabs -->\r\n\r\n<div class=\"mb-4\">\r\n  <div\r\n    *ngFor=\"let activityMeta of chapter.syllabus\"\r\n    class=\"default-activity-bar\"\r\n    [ngClass]=\"lockStatusClass(activityMeta)\"\r\n    [ngStyle]=\"{'max-width.%': this.maxWidthPercent / chapter.syllabus.length}\"\r\n    (click)=\"activityBarClick(activityMeta)\"\r\n    >\r\n  </div>\r\n</div>\r\n","import { Component, Input } from '@angular/core'\r\n\r\n// WNGX services\r\nimport { UserService } from 'src/app/core/services/user/user.service'\r\nimport { CompletionStatsService } from 'src/app/core/services/user/completion-stats.service'\r\nimport { NavService } from '../../../workarea/nav/nav.service'\r\n\r\n// WNGX models and misc\r\nimport { ActivityMeta } from '../../../workarea/models/activity-meta.model'\r\nimport { Chapter } from 'src/app/pages/webcourse/activities/models/chapter.model'\r\n\r\n@Component({\r\n  selector: 'app-activities-bar',\r\n  templateUrl: './activities-bar.component.html',\r\n  styleUrls: ['./activities-bar.component.scss']\r\n})\r\nexport class ActivitiesBarComponent {\r\n\r\n  @Input() chapter: Chapter\r\n  maxWidthPercent = 94\r\n\r\n  constructor(\r\n    public completionStatsService: CompletionStatsService,\r\n    public user: UserService,\r\n    private navService: NavService\r\n  ) { }\r\n\r\n  activityBarClick(activityMeta: ActivityMeta) {\r\n    if (activityMeta.seq <= this.tac) {\r\n      this.navService.NavigateByAid(activityMeta.activity_id)\r\n    }\r\n  }\r\n\r\n  lockStatusClass(activityMeta: ActivityMeta) {\r\n    return (activityMeta.seq <= this.tac) ? 'unlocked' : 'locked'\r\n  }\r\n\r\n  get tac() {\r\n    return this.completionStatsService.totalActivitiesCompleted\r\n  }\r\n\r\n}\r\n","<div\r\n  id=\"chapter-index-tab\"\r\n  class=\"px-4\"\r\n  *ngIf=\"this.courseChapterIndexService.selectedCourseChapters as chapterIndex; else loading\"\r\n  @fadeInOut\r\n  >\r\n  <div class=\"container-fluid my-3\">\r\n    <div class=\"row\">\r\n      <div class=\"col mt-3\">\r\n        <ol class=\"list-unstyled\">\r\n          <li *ngFor=\"let chapter of chapterIndex, let chapterNumber = index\" class=\"h5 font-weight-normal\">\r\n\r\n            <div *ngIf=\"chapterUnlock(chapterIndex, chapterNumber); else lockedChapter\">\r\n              <a (click)=\"this.navService.NavigateByAid(chapter.syllabus[0].activity_id)\" class=\"handy\">\r\n                {{chapter.label}}\r\n              </a>\r\n            </div>\r\n            <ng-template #lockedChapter>\r\n              <div class=\"primary-text\">\r\n                {{chapter.label}}\r\n              </div>\r\n            </ng-template>\r\n\r\n            <app-activities-bar [chapter]=\"chapter\"></app-activities-bar>\r\n\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #loading>\r\n  <div class=\"mt-5\">\r\n    <app-loading-spinner></app-loading-spinner>\r\n  </div>\r\n</ng-template>\r\n","import { Component } from '@angular/core'\r\n\r\n// WNGX services\r\nimport { CompletionStatsService } from 'src/app/core/services/user/completion-stats.service'\r\nimport { SelectedCourseService } from 'src/app/core/services/selected-course/selected-course.service'\r\nimport { CourseChapterIndexService } from 'src/app/core/services/course-chapter-index/course-chapter-index.service'\r\n\r\n// WNGX models and misc\r\nimport { Chapter } from '../../models/chapter.model'\r\nimport { FadeInOut } from 'src/app/core/animations/fade-in-out.animation'\r\nimport { NavService } from '../../workarea/nav/nav.service'\r\n\r\n@Component({\r\n  selector: 'app-chapter-index',\r\n  templateUrl: './chapter-index.component.html',\r\n  styleUrls: ['./chapter-index.component.scss'],\r\n  animations: [FadeInOut]\r\n})\r\nexport class ChapterIndexComponent {\r\n\r\n  constructor(\r\n    public selectedCourseService: SelectedCourseService,\r\n    public courseChapterIndexService: CourseChapterIndexService,\r\n    private completionStatsService: CompletionStatsService,\r\n    public navService: NavService\r\n  ) { }\r\n\r\n  chapterUnlock(chapterIndex: Chapter[], chapterNumber: number) {\r\n    let seq = chapterIndex[chapterNumber].syllabus[0].seq\r\n    return (seq <= this.completionStatsService.totalActivitiesCompleted) ? true : false\r\n  }\r\n}\r\n","<div id=\"progress-tab\" class=\"px-4 mt-3\">\r\n\r\n  <div *ngIf=\"this.selectedCourseService.selectedCourse as selectedCourse; else loading\">\r\n    <div class=\"container-fluid my-3\" [@FadeInOut2]=\"selectedCourse\">\r\n      <div class=\"row\">\r\n        <div class=\"col mt-3\">\r\n          <p class=\"h5 mb-0 primary-text\" [innerHtml]=\"selectedCourse.title\"></p>\r\n          <small class=\"text-uppercase main-label primary-text\">Course with {{selectedCourse.total_activities}} activities</small>\r\n          <div class=\"mt-2\" id=\"courseProgress\">\r\n            <ngb-progressbar\r\n              [value]=\"this.completionStatsService.totalActivitiesCompleted / selectedCourse.total_activities * 100\"\r\n              height=\"3px\"\r\n            ></ngb-progressbar>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"this.courseChapterIndexService.selectedChapter as selectedChapter; else loading\">\r\n    <div class=\"container-fluid my-3\" [@FadeInOut2]=\"selectedChapter\">\r\n      <div class=\"row\">\r\n        <div class=\"col mt-3\">\r\n          <p class=\"h5 mb-0 primary-text\">{{ selectedChapter.label }}</p>\r\n          <small class=\"text-uppercase main-label primary-text\">Chapter with {{ selectedChapter.syllabus.length }} activities</small>\r\n          <app-activities-bar [chapter]=\"selectedChapter\"></app-activities-bar>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <ng-template #loading>\r\n    <div class=\"mt-5\">\r\n      <app-loading-spinner></app-loading-spinner>\r\n    </div>\r\n  </ng-template>\r\n</div>\r\n","import { Component } from '@angular/core'\r\n\r\n// WNGX imports\r\nimport { CompletionStatsService } from 'src/app/core/services/user/completion-stats.service'\r\nimport { SelectedCourseService } from 'src/app/core/services/selected-course/selected-course.service'\r\nimport { CourseChapterIndexService } from 'src/app/core/services/course-chapter-index/course-chapter-index.service'\r\nimport { FadeInOut2 } from 'src/app/core/animations/fade-in-out-2.animation'\r\n\r\n@Component({\r\n  selector: 'app-selected',\r\n  templateUrl: './selected.component.html',\r\n  styleUrls: ['./selected.component.scss'],\r\n  animations: [FadeInOut2]\r\n})\r\nexport class SelectedComponent {\r\n\r\n  constructor(\r\n    public completionStatsService: CompletionStatsService,\r\n    public courseChapterIndexService: CourseChapterIndexService,\r\n    public selectedCourseService: SelectedCourseService\r\n  ) { }\r\n\r\n}\r\n","<div\r\n  *ngIf=\"(activityHelp$ | async) as activityHelp; else loading\"\r\n  id=\"activity-help-tab\" class=\"px-4\"\r\n  @fadeInOut\r\n  >\r\n  <div class=\"container-fluid my-3\">\r\n    <div class=\"row\">\r\n      <div class=\"col mt-3 primary-text\">\r\n        <div class=\"h5\">Activity Help</div>\r\n        <div [innerHtml]=\"activityHelp.help\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #loading>\r\n  <div class=\"mt-5\">\r\n    <app-loading-spinner></app-loading-spinner>\r\n  </div>\r\n</ng-template>\r\n","import { Component, OnInit } from '@angular/core'\r\nimport { HttpClient } from '@angular/common/http'\r\nimport { BehaviorSubject } from 'rxjs'\r\nimport { shareReplay } from 'rxjs/operators'\r\n\r\n// WNGX Services\r\nimport { ConfigService } from '../../../../../core/services/config/config.service'\r\nimport { SelectedCourseService } from 'src/app/core/services/selected-course/selected-course.service'\r\n\r\n// WNGX Models and Misc\r\nimport { Activity } from '../../workarea/models/activity.model'\r\nimport { FadeInOut } from '../../../../../core/animations/fade-in-out.animation'\r\nimport { ActivityHelp } from './activity-help.model'\r\n\r\n@Component({\r\n  selector: 'app-activity-help',\r\n  templateUrl: './activity-help.component.html',\r\n  styleUrls: ['./activity-help.component.sass'],\r\n  animations: [FadeInOut]\r\n})\r\nexport class ActivityHelpComponent implements OnInit {\r\n\r\n  public activityHelp$ = new BehaviorSubject<ActivityHelp | null>(null)\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private configService: ConfigService,\r\n    private selectedCourseService: SelectedCourseService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.selectedCourseService.selectedActivitySet$.subscribe(\r\n      (activities: Activity[]) => {\r\n        this.getActivityHelp(activities[activities.length - 1].meta.activity_type).subscribe(\r\n          (help: ActivityHelp) => { this.activityHelp$.next(help) }\r\n        )\r\n      }\r\n    )\r\n  }\r\n\r\n  getActivityHelp(type: string) {\r\n    return this.httpClient.get<ActivityHelp>(\r\n      `${this.configService.params.api.route}/webcourse/activities/help/${type}`\r\n    ).pipe(shareReplay(1))\r\n  }\r\n\r\n}\r\n","<div\r\n  id=\"bookmarks-tab\"\r\n  class=\"px-4\"\r\n  @fadeInOut\r\n>\r\n  <div class=\"container-fluid my-3\">\r\n    <div class=\"row\">\r\n      <div class=\"col h5 mt-3\">\r\n        Bookmarks\r\n      </div>\r\n    </div>\r\n    <div\r\n      *ngFor=\"let bookmark of this.bookmarksService.bookmarks$ | async\"\r\n      class=\"bookmark\"\r\n      [ngClass]=\"'bookmark-id-' + bookmark.id\"\r\n      [@fadeInOut]=\"'fadeInOut'\"\r\n    >\r\n      <div\r\n        class=\"row border rounded bg-light my-3 p-2 shadow-sm\"\r\n        *ngIf=\"!bookmark.deleted\"\r\n        [@fadeInOut]=\"'fadeInOut'\"\r\n      >\r\n        <div class=\"col text-dark text-truncate\">\r\n          <div class=\"container-fluid\">\r\n            <div\r\n              class=\"row lead text-truncate\"\r\n              role=\"button\"\r\n              (click)=\"this.loadBookmarkedActivity(bookmark.aid)\"\r\n            >\r\n              {{ bookmark.label }}\r\n            </div>\r\n            <div class=\"row text-secondary text-uppercase\">\r\n              <div class=\"col p-0\">\r\n                <small>{{ bookmark.created_at | date:'hh:mm, MMM d, y' }}</small>\r\n              </div>\r\n              <div class=\"col-auto text-right p-0\">\r\n                <small>Activity #{{bookmark.aid}}</small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-auto my-auto\">\r\n          <i\r\n            role=\"button\"\r\n            class=\"fa-solid fa-trash fa-lg text-right text-secondary\"\r\n            (click)=\"this.deleteBookmarkBtn(bookmark)\"\r\n          ></i>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"row my-2\">\r\n      <div class=\"col primary-text lead\">\r\n        Click the <i class=\"fa-regular fa-bookmark mx-1\"></i>\r\n        icon at the top of any activity set to add a bookmark.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component } from '@angular/core'\r\nimport { Router } from '@angular/router'\r\n\r\nimport { BookmarksService } from './bookmarks.service'\r\nimport { FadeInOut } from 'src/app/core/animations/fade-in-out.animation'\r\nimport { SelectedCourseService } from 'src/app/core/services/selected-course/selected-course.service'\r\nimport { Bookmark } from './bookmark.model'\r\n\r\n@Component({\r\n  selector: 'app-bookmarks',\r\n  templateUrl: './bookmarks.component.html',\r\n  styleUrls: ['./bookmarks.component.sass'],\r\n  animations: [FadeInOut]\r\n})\r\nexport class BookmarksComponent {\r\n\r\n  constructor(\r\n    public bookmarksService: BookmarksService,\r\n    private selectedCourseService: SelectedCourseService,\r\n    private router: Router\r\n  ) {\r\n    this.bookmarksService.getBookmarks(\r\n      this.selectedCourseService.selectedCourse.id\r\n    )\r\n  }\r\n\r\n  loadBookmarkedActivity(aid: number) {\r\n    this.router.navigateByUrl(`/webcourse/activities/${aid}`)\r\n  }\r\n\r\n  deleteBookmarkBtn(bookmark: Bookmark) {\r\n    bookmark.deleted = true\r\n    this.bookmarksService.deleteBookmark(bookmark.aid).subscribe(\r\n      () => {\r\n        this.bookmarksService.deletedBookmarkAid$.next(bookmark.aid)\r\n      }\r\n    )\r\n  }\r\n\r\n}\r\n","<div class=\"container-fluid\" id=\"activities-global\">\r\n  <div class=\"row\">\r\n    <div class=\"col-lg-5 px-0 sticky-top d-print-none\" style=\"background-color: transparent;\">\r\n      <div id=\"activity-menu\" class=\"py-2 container-fluid shadow-sm\">\r\n        <ul ngbNav #nav=\"ngbNav\" class=\"nav-pills\" id=\"menu\">\r\n          <li ngbNavItem>\r\n            <a ngbNavLink (click)=\"this.activitiesService.showSideMenu = true\">\r\n              <fa-icon [icon]=\"faUserGraduate\" size=\"lg\" class=\"d-block text-center\"></fa-icon>\r\n\r\n              <!--\r\n                Combo of none/block classes supports up to six icons on most resolutions,\r\n                with a likely exception for widths of ~1200 through 1250px.\r\n                At xs, despite being full width, screen is too small for labels.\r\n                At sm & md, menu is full width, with room for labels.\r\n                At lg the sidebar appears, the menu now spanning only its width:\r\n                No room for labels until xl.\r\n              -->\r\n\r\n              <div class=\"d-none d-sm-block d-lg-none d-xl-block mt-1 text-uppercase activity-menu-label\">\r\n                <small>Progress</small>\r\n              </div>\r\n            </a>\r\n            <ng-template ngbNavContent>\r\n              <app-selected></app-selected>\r\n            </ng-template>\r\n          </li>\r\n          <li ngbNavItem>\r\n            <a ngbNavLink (click)=\"this.activitiesService.showSideMenu = true\">\r\n              <fa-icon [icon]=\"faList\" size=\"lg\" class=\"d-block text-center\"></fa-icon>\r\n              <div class=\"d-none d-sm-block d-lg-none d-xl-block mt-1 text-uppercase activity-menu-label\">\r\n                <small>Index</small>\r\n              </div>\r\n            </a>\r\n            <ng-template ngbNavContent>\r\n              <app-chapter-index></app-chapter-index>\r\n            </ng-template>\r\n          </li>\r\n          <li ngbNavItem>\r\n            <a ngbNavLink (click)=\"this.activitiesService.showSideMenu = true\">\r\n              <fa-icon [icon]=\"faLeaf\" size=\"lg\" class=\"d-block text-center\"></fa-icon>\r\n              <div class=\"d-none d-sm-block d-lg-none d-xl-block mt-1 text-uppercase activity-menu-label\">\r\n                <small>Publisher</small>\r\n              </div>\r\n            </a>\r\n            <ng-template ngbNavContent>\r\n              <app-publisher-info></app-publisher-info>\r\n            </ng-template>\r\n          </li>\r\n          <!-- <li ngbNavItem>\r\n            <a ngbNavLink>\r\n              <fa-icon [icon]=\"faInfoCircle\" size=\"lg\" class=\"d-block text-center\"></fa-icon>\r\n              <div class=\"d-none d-sm-block d-lg-none d-xl-block mt-1 text-uppercase activity-menu-label\">\r\n                <small>About</small>\r\n              </div>\r\n            </a>\r\n            <ng-template ngbNavContent>\r\n              <p class=\"mt-3 px-4\">Course Enrol / Welcome message is visible here. The user initially sees it\r\n              full screen when entering an access code. Later they can come back to it here.</p>\r\n            </ng-template>\r\n          </li> -->\r\n          <li ngbNavItem>\r\n            <a ngbNavLink (click)=\"this.activitiesService.showSideMenu = true\">\r\n              <fa-icon [icon]=\"faBookBookmark\" size=\"lg\" class=\"d-block text-center\"></fa-icon>\r\n              <div class=\"d-none d-sm-block d-lg-none d-xl-block mt-1 text-uppercase activity-menu-label\">\r\n                <small>Bookmarks</small>\r\n              </div>\r\n            </a>\r\n            <ng-template ngbNavContent>\r\n              <app-bookmarks></app-bookmarks>\r\n            </ng-template>\r\n          </li>\r\n          <li ngbNavItem>\r\n            <a ngbNavLink (click)=\"this.activitiesService.showSideMenu = true\">\r\n              <fa-icon [icon]=\"faQuestionCircle\" size=\"lg\" class=\"d-block text-center\"></fa-icon>\r\n              <div class=\"d-none d-sm-block d-lg-none d-xl-block mt-1 text-uppercase activity-menu-label\">\r\n                <small>Help</small>\r\n              </div>\r\n            </a>\r\n            <ng-template ngbNavContent>\r\n              <app-activity-help></app-activity-help>\r\n            </ng-template>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div id=\"activity-menu-outlet\">\r\n        <div *ngIf=\"this.activitiesService.showSideMenu\" [ngbNavOutlet]=\"nav\"></div>\r\n      </div>\r\n\r\n      <!-- Roll-up button for hiding ngbNavOutlet. Displayed when sidebar is hidden due to lack of space. -->\r\n      <div class=\"d-lg-none\">\r\n        <div class=\"border-top border-warning text-center\">\r\n          <fa-icon\r\n            [icon]=\"this.activitiesService.showSideMenu ? faChevronUp : faChevronDown\"\r\n            (click)=\"this.activitiesService.showSideMenu = !this.activitiesService.showSideMenu\"\r\n            class=\"handy text-warning\"\r\n            size=\"sm\"\r\n          ></fa-icon>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"col-lg-7 bg-light\" id=\"workareaContent\">\r\n      <app-workarea></app-workarea>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core'\r\nimport { RouterModule, Routes } from '@angular/router'\r\nimport { CommonModule } from '@angular/common'\r\nimport { ActivitiesComponent } from './activities.component'\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'selected',\r\n    pathMatch: 'full'\r\n  },\r\n  {\r\n    path: ':aid',\r\n    component: ActivitiesComponent\r\n  }\r\n]\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    [RouterModule.forChild(routes)],\r\n    CommonModule\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class ActivitiesRoutingModule { }\r\n","import { Component, OnInit, OnDestroy } from '@angular/core'\r\nimport { ActivatedRoute } from '@angular/router'\r\nimport { NgbModal, NgbModalOptions } from '@ng-bootstrap/ng-bootstrap'\r\nimport { Subscription } from 'rxjs'\r\n\r\nimport { faUserGraduate } from '@fortawesome/free-solid-svg-icons'\r\nimport { faList } from '@fortawesome/free-solid-svg-icons'\r\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { faChevronDown } from '@fortawesome/free-solid-svg-icons'\r\nimport { faChevronUp } from '@fortawesome/free-solid-svg-icons'\r\nimport { faLeaf } from '@fortawesome/free-solid-svg-icons'\r\nimport { faBookBookmark } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// WNGX services and components\r\nimport { CollectUserNamesComponent } from './components/collect-user-names/collect-user-names.component'\r\nimport { PublisherService } from './../../catalogue/publisher/publisher.service'\r\nimport { ActivitiesService } from './activities.service'\r\nimport { UserService } from '../../../core/services/user/user.service'\r\nimport { Activity } from './workarea/models/activity.model'\r\n\r\n@Component({\r\n  selector: 'app-activities',\r\n  templateUrl: './activities.component.html',\r\n  styleUrls: ['./activities.component.scss']\r\n})\r\nexport class ActivitiesComponent implements OnInit, OnDestroy {\r\n\r\n  private modalOptions: NgbModalOptions\r\n  private sub: Subscription\r\n\r\n  faUserGraduate = faUserGraduate\r\n  faList = faList\r\n  faLeaf = faLeaf\r\n  faInfoCircle = faInfoCircle\r\n  faQuestionCircle = faQuestionCircle\r\n  faChevronUp = faChevronUp\r\n  faChevronDown = faChevronDown\r\n  faBookBookmark = faBookBookmark\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private ngbModal: NgbModal,\r\n    public activitiesService: ActivitiesService,\r\n    private userService: UserService,\r\n    public publisherService: PublisherService\r\n  ) {\r\n    this.modalOptions = {\r\n      backdrop: 'static',\r\n      centered: true,\r\n      keyboard: false\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!this.userService.user.first_name) {\r\n      const comp = this.ngbModal.open(CollectUserNamesComponent, this.modalOptions)\r\n      comp.componentInstance.user = this.userService.user\r\n    }\r\n\r\n    this.activitiesService.getActivities(this.activatedRoute.snapshot.paramMap.get('aid'))\r\n      .subscribe(\r\n        (activitySet: Activity[]) => {\r\n          this.activitiesService.bootstrapCourse(activitySet)\r\n        }\r\n      )\r\n\r\n    this.sub = this.activatedRoute.params.subscribe(\r\n      data => {\r\n        this.activitiesService.loadActivities(data.aid)\r\n      }\r\n    )\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe()\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { ReactiveFormsModule } from '@angular/forms'\r\nimport { ActiveModeComponent } from './active-mode.component'\r\nimport { PipesModule } from './../../../../../shared/pipes/pipes.module'\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ActiveModeComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    PipesModule\r\n  ],\r\n  exports: [\r\n    ActiveModeComponent\r\n  ]\r\n})\r\n\r\nexport class ActiveModeModule { }\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome'\r\nimport { NavComponent } from './nav.component'\r\n\r\n@NgModule({\r\n  declarations: [NavComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FontAwesomeModule\r\n  ],\r\n  exports: [NavComponent]\r\n})\r\n\r\nexport class NavModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop'\r\n\r\n/* Webcourse-NG resources */\r\nimport { DndComponent } from './dnd.component'\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DndComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    DragDropModule\r\n  ],\r\n  exports: [ DndComponent ]\r\n})\r\n\r\nexport class DndModule { }\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { ClickRotateComponent } from './click-rotate.component'\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [ClickRotateComponent],\r\n  imports: [CommonModule],\r\n  exports: [ClickRotateComponent]\r\n})\r\nexport class ClickRotateModule { }\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { DemoFlagComponent } from './demo-flag.component'\r\nimport { FormsModule } from '@angular/forms'\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DemoFlagComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  exports: [ DemoFlagComponent ]\r\n})\r\nexport class DemoFlagModule { }\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome'\r\n\r\n// WNGX imports\r\nimport { BeforeAndAfterComponent } from './before-and-after.component'\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    BeforeAndAfterComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FontAwesomeModule\r\n  ],\r\n  exports: [\r\n    BeforeAndAfterComponent\r\n  ]\r\n})\r\n\r\nexport class BeforeAndAfterModule { }\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome'\r\n\r\n// WNGX imports\r\nimport { CompletionCertComponent } from './completion-cert.component'\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CompletionCertComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FontAwesomeModule\r\n  ],\r\n  exports: [\r\n    CompletionCertComponent\r\n  ]\r\n})\r\n\r\nexport class CompletionCertModule { }\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\n\r\n// WNGX imports\r\nimport { BeforeAndAfterModule } from './before-and-after/before-and-after.module'\r\nimport { CompletionCertModule } from './completion-cert/completion-cert.module'\r\n\r\nimport { SpecialActivityComponent } from './special-activity.component'\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SpecialActivityComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    BeforeAndAfterModule,\r\n    CompletionCertModule\r\n  ],\r\n  exports: [\r\n    SpecialActivityComponent\r\n  ]\r\n})\r\n\r\nexport class SpecialActivityModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BookmarkButtonComponent } from './bookmark-button.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    BookmarkButtonComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    BookmarkButtonComponent\r\n  ]\r\n})\r\nexport class BookmarkButtonModule { }\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\n\r\nimport { WorkAreaComponent } from './workarea.component'\r\nimport { ActiveModeModule } from './active-mode/active-mode.module'\r\nimport { ReviewModeModule } from './review-mode/review-mode.module'\r\nimport { PipesModule } from './../../../../shared/pipes/pipes.module'\r\nimport { NavModule } from './nav/nav.module'\r\nimport { DndModule } from './activities/dnd/dnd.module'\r\nimport { ChapterEndComponent } from './components/chapter-end/chapter-end.component'\r\nimport { CourseEndComponent } from './components/course-end/course-end.component'\r\nimport { ClickRotateModule } from './activities/click-rotate/click-rotate.module'\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome'\r\nimport { DemoFlagModule } from '../../builder/activity/demo-flag/demo-flag.module';\r\nimport { SpecialActivityModule } from './activities/special-activity/special-activity.module'\r\nimport { BookmarkButtonModule } from '../sidebar/bookmarks/bookmark-button/bookmark-button.module'\r\n\r\n@NgModule({\r\n  declarations: [\r\n    WorkAreaComponent,\r\n    ChapterEndComponent,\r\n    CourseEndComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ReviewModeModule,\r\n    ActiveModeModule,\r\n    NavModule,\r\n    PipesModule,\r\n    DndModule,\r\n    ClickRotateModule,\r\n    FontAwesomeModule,\r\n    DemoFlagModule,\r\n    SpecialActivityModule,\r\n    BookmarkButtonModule\r\n  ],\r\n  exports: [\r\n    WorkAreaComponent,\r\n    SpecialActivityModule\r\n  ]\r\n})\r\nexport class WorkAreaModule { }\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { PublisherInfoComponent } from './publisher-info.component'\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome'\r\nimport { LoadingSpinnerModule } from '../../../../../core/modules/loading-spinner/loading-spinner.module'\r\n\r\n@NgModule({\r\n  declarations: [PublisherInfoComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FontAwesomeModule,\r\n    LoadingSpinnerModule\r\n  ],\r\n  exports: [PublisherInfoComponent]\r\n})\r\n\r\nexport class PublisherInfoModule { }\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { RouterModule } from '@angular/router'\r\nimport { ActivitiesBarComponent } from './activities-bar.component'\r\n\r\n@NgModule({\r\n  declarations: [ActivitiesBarComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule\r\n  ],\r\n  exports: [ActivitiesBarComponent]\r\n})\r\nexport class ActivitiesBarModule { }\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { RouterModule } from '@angular/router'\r\nimport { ActivitiesBarModule } from './../shared/activities-bar/activities-bar.module'\r\nimport { LoadingSpinnerModule } from './../../../../../core/modules/loading-spinner/loading-spinner.module'\r\n\r\nimport { ChapterIndexComponent } from './chapter-index.component'\r\n\r\n@NgModule({\r\n  declarations: [ChapterIndexComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    ActivitiesBarModule,\r\n    LoadingSpinnerModule\r\n  ],\r\n  exports: [\r\n    ChapterIndexComponent\r\n  ]\r\n})\r\nexport class ChapterIndexModule { }\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap'\r\nimport { SelectedComponent } from './selected.component'\r\nimport { LoadingSpinnerModule } from '../../../../../core/modules/loading-spinner/loading-spinner.module'\r\nimport { ActivitiesBarModule } from '../shared/activities-bar/activities-bar.module'\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SelectedComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    NgbModule,\r\n    LoadingSpinnerModule,\r\n    ActivitiesBarModule\r\n  ],\r\n  exports: [SelectedComponent]\r\n})\r\nexport class SelectedModule { }\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { ActivityHelpComponent } from './activity-help.component'\r\nimport { LoadingSpinnerModule } from './../../../../../core/modules/loading-spinner/loading-spinner.module'\r\n\r\n@NgModule({\r\n  declarations: [ActivityHelpComponent],\r\n  imports: [\r\n    CommonModule,\r\n    LoadingSpinnerModule\r\n  ],\r\n  exports: [ActivityHelpComponent]\r\n})\r\n\r\nexport class ActivityHelpModule { }\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { BookmarksComponent } from './bookmarks.component'\r\nimport { LoadingSpinnerModule } from './../../../../../core/modules/loading-spinner/loading-spinner.module';\r\n\r\n@NgModule({\r\n  declarations: [BookmarksComponent],\r\n  imports: [\r\n    CommonModule,\r\n    LoadingSpinnerModule\r\n  ],\r\n  exports: [BookmarksComponent]\r\n})\r\n\r\nexport class BookmarksModule { }\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { ActivitiesRoutingModule } from './activities-routing.module'\r\nimport { FormsModule } from '@angular/forms'\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap'\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome'\r\n\r\nimport { WorkAreaModule } from './workarea/workarea.module'\r\nimport { ThemeModule } from '../../../views/theme/theme.module'\r\nimport { PublisherInfoModule } from './sidebar/publisher-info/publisher-info.module'\r\nimport { ChapterIndexModule } from './sidebar/chapter-index/chapter-index.module'\r\nimport { SelectedModule } from './sidebar/selected/selected.module'\r\nimport { ActivityHelpModule } from './sidebar/activity-help/activity-help.module'\r\nimport { PipesModule } from './../../../shared/pipes/pipes.module'\r\nimport { LoadingSpinnerModule } from './../../../core/modules/loading-spinner/loading-spinner.module'\r\n\r\nimport { ActivitiesComponent } from './activities.component'\r\nimport { CollectUserNamesComponent } from './components/collect-user-names/collect-user-names.component'\r\nimport { BookmarksModule } from './sidebar/bookmarks/bookmarks.module'\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ActivitiesComponent,\r\n    CollectUserNamesComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    NgbModule,\r\n    FormsModule,\r\n    FontAwesomeModule,\r\n    ActivitiesRoutingModule,\r\n    WorkAreaModule,\r\n    ThemeModule,\r\n    PublisherInfoModule,\r\n    ChapterIndexModule,\r\n    SelectedModule,\r\n    ActivityHelpModule,\r\n    PipesModule,\r\n    LoadingSpinnerModule,\r\n    BookmarksModule\r\n  ],\r\n  providers: [\r\n  ],\r\n  exports: [\r\n    FormsModule,\r\n    CollectUserNamesComponent\r\n  ]\r\n})\r\n\r\nexport class ActivitiesModule { }\r\n"],"x_google_ignoreList":[9,10]}