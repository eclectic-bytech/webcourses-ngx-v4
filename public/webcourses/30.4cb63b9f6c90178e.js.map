{"version":3,"file":"30.4cb63b9f6c90178e.js","mappings":"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","names":["StudentsService","constructor","httpClient","configService","this","getCourseProgress","cid","get","params","api","route","pipe","activities","getCourseStudentsGroups","courseStudentGroups","static","core","factory","FilterPipe","transform","students","groupId","filter","student","gid","pure","i0","StudentsComponent","router","webcoursesService","studentReportService","faBook","ngOnInit","courseStudents$","data","map","courseStudentGroups$","studentsGroups","publisherInfo$","publisherInfo","publisherCourseInfo$","getWebcourses","snapshot","selectors","FadeInOut","StudentsResolver","localService","resolve","state","StudentsGroupsResolver","routes","path","component","PublisherResolver","title","StudentsRoutingModule","imports","RouterModule","CommonModule","StudentsModule","FontAwesomeModule","FormsModule","ThemeModule"],"sourceRoot":"webpack:///","sources":["./src/app/pages/publisher/webcourse/students/students.service.ts","./src/app/pages/publisher/webcourse/students/filter.pipe.ts","./src/app/pages/publisher/webcourse/students/students.component.html","./src/app/pages/publisher/webcourse/students/students.component.ts","./src/app/pages/publisher/webcourse/students/students.resolver.ts","./src/app/pages/publisher/webcourse/students/students-groups.resolver.ts","./src/app/pages/publisher/webcourse/students/students-routing.module.ts","./src/app/pages/publisher/webcourse/students/students.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core'\r\nimport { HttpClient } from '@angular/common/http'\r\nimport { ConfigService } from '../../../../core/services/config/config.service'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StudentsService {\r\n\r\n  public courseProgress\r\n  public selectedGroup = 0\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private configService: ConfigService\r\n  ) { }\r\n\r\n  getCourseProgress(cid) {\r\n    return this.httpClient.get<any[]>(\r\n      `${this.configService.params.api.route}/publisher/admin/course/students/index.php?cid=` + cid\r\n    ).pipe( activities => activities )\r\n  }\r\n\r\n  getCourseStudentsGroups(cid) {\r\n    return this.httpClient.get<any[]>(\r\n      `${this.configService.params.api.route}/publisher/admin/course/students/groups/index.php?cid=` + cid\r\n    ).pipe( courseStudentGroups => courseStudentGroups )\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core'\r\n\r\n@Pipe({\r\n  name: 'filter'\r\n})\r\nexport class FilterPipe implements PipeTransform {\r\n\r\n  transform(students: any, groupId: number): any {\r\n\r\n    const isInGroup = function(student) {\r\n      if (student.gid === +groupId || (!student.gid && +groupId === 0)) {\r\n        return student\r\n      }\r\n    }\r\n\r\n    const results = students.filter(isInGroup)\r\n\r\n    return results\r\n\r\n  }\r\n\r\n}\r\n","<div *ngIf=\"(courseStudents$ | async) as courseStudents\" id=\"fullMainContent\" @fadeInOut>\r\n  <div *ngIf=\"(courseStudentGroups$ | async) as studentsGroups\">\r\n    <div *ngIf=\"(publisherInfo$ | async) as publisherInfo\" [appThemeSetNew]=\"publisherInfo\">\r\n\r\n      <div class=\"card mx-2\">\r\n\r\n        <div class=\"card-header\">\r\n          <div class=\"d-flex justify-content-between\">\r\n            <div class=\"align-self-top\">\r\n              <h1 class=\"common-heading mb-0\">Student Progress</h1>\r\n              <small\r\n                class=\"text-dark text-uppercase\"\r\n                *ngIf=\"(publisherCourseInfo$ | async) as courseInfo\"\r\n                >{{courseInfo[0].title}}</small>\r\n              <div class=\"m-0 mt-md-1 mt-lg-3 text-uppercase\">\r\n                <small class=\"font-weight-bold\">Students: {{ (courseStudents | filter : group.value.id).length}} / {{courseStudents.length}}</small>\r\n              </div>\r\n            </div>\r\n            <div class=\"align-self-center\">\r\n\r\n              <form novalidate #group=\"ngForm\" class=\"form-group\">\r\n                <select [(ngModel)]=\"this.studentReportService.selectedGroup\" class=\"form-control\" name=\"id\">\r\n                  <option [value]=\"0\">Lone Wolf</option>\r\n                  <option\r\n                    *ngFor=\"let group of studentsGroups; let i = index\"\r\n                    [value]=\"group.gid\"\r\n                    >\r\n                    {{group.label }}\r\n                  </option>\r\n                </select>\r\n              </form>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"card-body\">\r\n\r\n          <div class=\"list-group\">\r\n\r\n            <div class=\"row mb-2 pb-3 font-weight-bold text-uppercase text-dark border-bottom\">\r\n              <div class=\"col-1\">#</div>\r\n              <div class=\"col-5\">User</div>\r\n              <div class=\"col-2\">Started</div>\r\n              <div class=\"col-2\">Last Accessed</div>\r\n              <div class=\"col-1\">Done</div>\r\n              <div class=\"col-1\"></div>\r\n            </div>\r\n\r\n            <div\r\n              class=\"row my-2 handy\"\r\n              *ngFor=\"let student of courseStudents | filter : group.value.id; let i = index\"\r\n              >\r\n              <div class=\"col-1 text-nowrap\" [title]=\"'ID: ' + student.user_id\">{{ i+1 }}</div>\r\n              <div class=\"col-5 text-nowrap\">\r\n                <a target=\"_blank\" [href]=\"'mailto:' + student.email\">\r\n                  <span\r\n                    class=\"font-weight-bold\" title=\"{{ student.email }}\"\r\n                    [innerHtml]=\"(student.first_name && student.last_name)\r\n                      ? student.first_name + ' ' + student.last_name\r\n                      : student.username\"\r\n                  >\r\n                  </span>\r\n                </a>\r\n              </div>\r\n              <div class=\"col-2 text-nowrap\">{{ student.start_time }}</div>\r\n              <div class=\"col-2 text-nowrap\">{{ student.last_access }}</div>\r\n              <div class=\"col-1 text-nowrap\">{{ student.tac / student.ta * 100 | number:'1.0-0' }}%</div>\r\n              <div class=\"col-1\">\r\n                <fa-icon\r\n                  [icon]=\"faBook\"\r\n                  style=\"font-size: 125%; color: cornflowerblue\"\r\n                  [routerLink]=\"['/publisher', this.route.snapshot.paramMap.get('pub_id'), 'webcourse', this.route.snapshot.paramMap.get('cid'), 'student', student.user_id]\"\r\n                  >\r\n                </fa-icon>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core'\r\nimport { Observable } from 'rxjs'\r\nimport { map } from 'rxjs/operators'\r\nimport { ActivatedRoute, Router } from '@angular/router'\r\nimport { StudentsService } from './students.service'\r\nimport { Publisher } from '../../../../models/publisher.model'\r\nimport { faBook } from '@fortawesome/free-solid-svg-icons'\r\nimport { FadeInOut } from '../../../../core/animations/fade-in-out.animation'\r\nimport { WebcoursesService } from '../../webcourses/webcourses.service'\r\n\r\n@Component({\r\n  selector: 'app-course-progress',\r\n  templateUrl: './students.component.html',\r\n  styleUrls: ['./students.component.sass'],\r\n  animations: [FadeInOut]\r\n})\r\nexport class StudentsComponent implements OnInit {\r\n\r\n  faBook = faBook\r\n\r\n  courseStudents$: Observable<any[]>\r\n  courseStudentGroups$: Observable<any[]>\r\n  publisherInfo$: Observable<Publisher>\r\n  publisherCourseInfo$: Observable<any>\r\n\r\n  constructor(\r\n    public route: ActivatedRoute,\r\n    public router: Router,\r\n    public webcoursesService: WebcoursesService,\r\n    public studentReportService: StudentsService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.courseStudents$ = this.route.data.pipe(map(data => data.students))\r\n    this.courseStudentGroups$ = this.route.data.pipe(map(data => data.studentsGroups))\r\n    this.publisherInfo$ = this.route.data.pipe(map(data => data.publisherInfo))\r\n    this.publisherCourseInfo$ = this.webcoursesService.getWebcourses(this.route.snapshot.params.cid)\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core'\r\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router'\r\nimport { Observable } from 'rxjs'\r\nimport { StudentsService } from './students.service'\r\n\r\n@Injectable()\r\nexport class StudentsResolver implements Resolve<Observable<any[]>> {\r\n\r\n  constructor(\r\n    private localService: StudentsService\r\n  ) {}\r\n\r\n  public resolve(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<any[]> {\r\n    return this.localService.getCourseProgress(route.params.cid)\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core'\r\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router'\r\nimport { Observable } from 'rxjs'\r\nimport { StudentsService } from './students.service'\r\n\r\n@Injectable()\r\nexport class StudentsGroupsResolver implements Resolve<Observable<any[]>> {\r\n\r\n  constructor(\r\n    private localService: StudentsService\r\n  ) {}\r\n\r\n  public resolve(\r\n    route: ActivatedRouteSnapshot,\r\n  ): Observable<any[]> {\r\n    return this.localService.getCourseStudentsGroups(route.params.cid)\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core'\r\nimport { RouterModule, Routes } from '@angular/router'\r\nimport { CommonModule } from '@angular/common'\r\nimport { StudentsComponent } from './students.component'\r\nimport { StudentsResolver } from './students.resolver'\r\nimport { StudentsGroupsResolver } from './students-groups.resolver'\r\nimport { PublisherResolver } from '../../../catalogue/publisher/publisher.resolver'\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: StudentsComponent,\r\n    resolve: {\r\n      students: StudentsResolver,\r\n      studentsGroups: StudentsGroupsResolver,\r\n      publisherInfo: PublisherResolver\r\n    },\r\n    data: {\r\n      title: 'Webcourse Students'\r\n    }\r\n  },\r\n]\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    [RouterModule.forChild(routes)],\r\n    CommonModule\r\n  ],\r\n  exports: [RouterModule],\r\n  providers: [\r\n    StudentsResolver,\r\n    StudentsGroupsResolver,\r\n    PublisherResolver\r\n  ]\r\n})\r\n\r\nexport class StudentsRoutingModule { }\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { StudentsComponent } from './students.component'\r\nimport { RouterModule } from '@angular/router'\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome'\r\nimport { StudentsRoutingModule } from './students-routing.module'\r\nimport { FilterPipe } from './filter.pipe'\r\nimport { FormsModule } from '@angular/forms'\r\nimport { ThemeModule } from '../../../../views/theme/theme.module'\r\n\r\n@NgModule({\r\n  declarations: [\r\n    StudentsComponent,\r\n    FilterPipe\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    FontAwesomeModule,\r\n    StudentsRoutingModule,\r\n    FormsModule,\r\n    ThemeModule\r\n  ]\r\n})\r\nexport class StudentsModule { }\r\n"],"x_google_ignoreList":[]}