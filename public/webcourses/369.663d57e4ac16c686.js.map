{"version":3,"file":"369.663d57e4ac16c686.js","mappings":"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","names":["Portal","attach","host","_attachedHost","this","detach","isAttached","setAttachedHost","ComponentPortal","constructor","component","viewContainerRef","injector","componentFactoryResolver","super","TemplatePortal","templateRef","context","origin","elementRef","undefined","DomPortal","element","ElementRef","nativeElement","BasePortalOutlet","_isDisposed","attachDomPortal","hasAttached","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","_document","anchorNode","createComment","parentNode","insertBefore","appendChild","replaceChild","componentFactory","resolveComponentFactory","componentRef","createComponent","length","destroy","create","Injector","attachView","hostView","viewCount","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","rootNodes","forEach","rootNode","detectChanges","index","indexOf","remove","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","EventEmitter","_getRootNode","attachedRef","_attachedRef","ngOnInit","ngOnDestroy","ref","emit","clear","nodeType","ELEMENT_NODE","ɵfac","i0","DOCUMENT","ɵdir","selectors","PortalModule","ɵmod","ɵinj","scrollBehaviorSupported","supportsScrollBehavior","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","classList","add","disable","html","htmlStyle","bodyStyle","body","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","ScrollStrategyOptions","noop","close","config","block","reposition","i1","ɵprov","factory","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BaseOverlayDispatcher","_attachedOverlays","push","splice","OverlayKeyboardDispatcher","_keydownListener","event","overlays","i","_keydownEvents","observers","keydownEvents","next","_isAttached","runOutsideAngular","addEventListener","removeEventListener","OverlayOutsideClickDispatcher","_platform","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_getEventTarget","_clickListener","target","type","slice","_outsidePointerEvents","outsidePointerEvents","_addEventListeners","IOS","_cursorOriginalValue","cursor","i1$1","OverlayContainer","_containerElement","getContainerElement","_createContainer","containerClass","isBrowser","_isTestEnvironment","oppositePlatformContainers","querySelectorAll","container","createElement","setAttribute","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_animationsDisabled","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","_backdropClickHandler","_backdropTransitionendHandler","_disposeBackdrop","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","parentElement","_previousHostParent","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","onDestroy","Promise","resolve","then","detachBackdrop","detachmentResult","_detachContentWhenStable","_disposeScrollStrategy","complete","backdropClick","attachments","detachments","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","value","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","requestAnimationFrame","nextSibling","backdropToDetach","_backdropTimeout","setTimeout","cssClasses","isAdd","coerceArray","filter","c","subscription","takeUntil","merge","children","backdrop","clearTimeout","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","positions","_validatePositions","_boundingBox","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","_containerRect","originRect","viewportRect","containerRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","y","originX","startX","_isRtl","endX","originY","overlayStartX","overlayStartY","overlayX","overlayY","point","rawOverlayRect","overlay","getRoundedBoundingClientRect","offsetX","_getOffset","offsetY","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","cssClass","Element","destination","source","hasOwnProperty","input","units","split","parseFloat","clientRect","floor","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_alignItems","_xPosition","_xOffset","_width","_height","end","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","xPosition","xOffset","marginLeft","marginRight","marginTop","marginBottom","parent","OverlayPositionBuilder","global","flexibleConnectedTo","nextUniqueId","Overlay","scrollStrategies","_positionBuilder","_injector","_directionality","_animationsModuleType","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","get","ApplicationRef","i5","i6","ANIMATION_MODULE_TYPE","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","InjectionToken","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","OverlayModule","imports","BidiModule","ScrollingModule","_r2","ctx_r1","ctx_r0","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","duration","data","horizontalPosition","verticalPosition","MAX_TIMEOUT","pow","MatSnackBarRef","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","_onExit","_finishDismiss","dismiss","closed","exit","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","_open","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","SimpleSnackBar","snackBarRef","action","hasAction","ɵcmp","ctx","i2","i3","matSnackBarAnimations","snackBarState","trigger","state","opacity","transition","animate","_MatSnackBarContainerBase","_elementRef","_changeDetectorRef","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","_assertNotAttached","result","_afterPortalAttached","_live","FIREFOX","_role","onAnimationEnd","fromState","toState","_completeExit","onEnter","enter","_screenReaderAnnounce","_announceTimeoutId","onMicrotaskEmpty","panelClasses","Array","isArray","inertElement","querySelector","liveElement","focusedElement","activeElement","HTMLElement","removeAttribute","focus","viewQuery","_t","MatSnackBarContainer","t","decls","i3$1","MatSnackBarModule","CommonModule","MatButtonModule","MatCommonModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","_MatSnackBarBase","_overlay","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","openFromComponent","_attach","openFromTemplate","template","open","message","simpleSnackBarComponent","_attachSnackBarContainer","providers","useValue","containerPortal","snackBarContainerComponent","containerRef","instance","content","userConfig","_createOverlay","TemplateRef","$implicit","_createInjector","contentRef","observe","Breakpoints","toggle","handsetCssClass","matches","announce","_animateSnackBar","isLeft","isRight","i2$1","i3$2","MatSnackBar","live","breakpointObserver","parentSnackBar","defaultConfig"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2020/portal.mjs","./node_modules/@angular/cdk/fesm2020/overlay.mjs","./node_modules/@angular/material/fesm2020/snack-bar.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { ElementRef, Injector, Directive, EventEmitter, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nclass Portal {\n    /** Attach this portal to a host. */\n    attach(host) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (host == null) {\n                throwNullPortalOutletError();\n            }\n            if (host.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        let host = this._attachedHost;\n        if (host != null) {\n            this._attachedHost = null;\n            host.detach();\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwNoPortalAttachedError();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal extends Portal {\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nclass TemplatePortal extends Portal {\n    constructor(\n    /** The embedded template that will be used to instantiate an embedded View in the host. */\n    templateRef, \n    /** Reference to the ViewContainer into which the template will be stamped out. */\n    viewContainerRef, \n    /** Contextual data to be passed in to the embedded view. */\n    context, \n    /** The injector to use for the embedded view. */\n    injector) {\n        super();\n        this.templateRef = templateRef;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n        this.injector = injector;\n    }\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nclass DomPortal extends Portal {\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nclass BasePortalOutlet {\n    constructor() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n    attach(portal) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!portal) {\n                throwNullPortalError();\n            }\n            if (this.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            if (this._isDisposed) {\n                throwPortalOutletAlreadyDisposedError();\n            }\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwUnknownPortalTypeError();\n        }\n    }\n    /** Detaches a previously attached portal. */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /** @docs-private */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param outletElement Element into which the content is projected.\n     * @param _componentFactoryResolver Used to resolve the component factory.\n     *   Only required when attaching component portals.\n     * @param _appRef Reference to the application. Only used in component portals when there\n     *   is no `ViewContainerRef` available.\n     * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n     *   have one. Only used for component portals.\n     * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually\n     *   become a required parameter.\n     */\n    constructor(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        const resolver = (portal.componentFactoryResolver || this._componentFactoryResolver);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !resolver) {\n            throw Error('Cannot attach component portal to outlet without a ComponentFactoryResolver.');\n        }\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n                throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n            }\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector || Injector.NULL);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                // Verify that the ApplicationRef has registered views before trying to detach a host view.\n                // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n                if (this._appRef.viewCount > 0) {\n                    this._appRef.detachView(componentRef.hostView);\n                }\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        this._attachedPortal = portal;\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        let viewContainer = portal.viewContainerRef;\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        // Note that we want to detect changes after the nodes have been moved so that\n        // any directives inside the portal that are looking at the DOM inside a lifecycle\n        // hook won't be invoked too early.\n        viewRef.detectChanges();\n        this.setDisposeFn(() => {\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        });\n        this._attachedPortal = portal;\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose() {\n        super.dispose();\n        this.outletElement.remove();\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkPortal, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkPortal.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkPortal, selector: \"[cdkPortal]\", exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkPortal, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortal]',\n                    exportAs: 'cdkPortal',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }]; } });\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n}\nTemplatePortalDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TemplatePortalDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nTemplatePortalDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: TemplatePortalDirective, selector: \"[cdk-portal], [portal]\", providers: [\n        {\n            provide: CdkPortal,\n            useExisting: TemplatePortalDirective,\n        },\n    ], exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: TemplatePortalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-portal], [portal]',\n                    exportAs: 'cdkPortal',\n                    providers: [\n                        {\n                            provide: CdkPortal,\n                            useExisting: TemplatePortalDirective,\n                        },\n                    ],\n                }]\n        }] });\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    constructor(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /** Whether the portal component is initialized. */\n        this._isInitialized = false;\n        /** Emits when a portal is attached to the outlet. */\n        this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            portal.setAttachedHost(this);\n            element.parentNode.insertBefore(anchorNode, element);\n            this._getRootNode().appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /** Portal associated with the Portal outlet. */\n    get portal() {\n        return this._attachedPortal;\n    }\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal || null;\n    }\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /** Gets the root node of the portal outlet. */\n    _getRootNode() {\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE\n            ? nativeElement\n            : nativeElement.parentNode);\n    }\n}\nCdkPortalOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkPortalOutlet, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nCdkPortalOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkPortalOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalOutlet]',\n                    exportAs: 'cdkPortalOutlet',\n                    inputs: ['portal: cdkPortalOutlet'],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { attached: [{\n                type: Output\n            }] } });\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n}\nPortalHostDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: PortalHostDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nPortalHostDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: PortalHostDirective, selector: \"[cdkPortalHost], [portalHost]\", inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, providers: [\n        {\n            provide: CdkPortalOutlet,\n            useExisting: PortalHostDirective,\n        },\n    ], exportAs: [\"cdkPortalHost\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: PortalHostDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalHost',\n                    inputs: ['portal: cdkPortalHost'],\n                    providers: [\n                        {\n                            provide: CdkPortalOutlet,\n                            useExisting: PortalHostDirective,\n                        },\n                    ],\n                }]\n        }] });\nclass PortalModule {\n}\nPortalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: PortalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPortalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: PortalModule, declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] });\nPortalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: PortalModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: PortalModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                    declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\nclass PortalInjector {\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n","import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, ElementRef, ApplicationRef, ANIMATION_MODULE_TYPE, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _getEventTarget, _isTestEnvironment } from '@angular/cdk/platform';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollStrategyOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseOverlayDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._ngZone = _ngZone;\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    const keydownEvents = overlays[i]._keydownEvents;\n                    /** @breaking-change 14.0.0 _ngZone will be required. */\n                    if (this._ngZone) {\n                        this._ngZone.run(() => keydownEvents.next(event));\n                    }\n                    else {\n                        keydownEvents.next(event);\n                    }\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n            }\n            else {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                const outsidePointerEvents = overlayRef._outsidePointerEvents;\n                /** @breaking-change 14.0.0 _ngZone will be required. */\n                if (this._ngZone) {\n                    this._ngZone.run(() => outsidePointerEvents.next(event));\n                }\n                else {\n                    outsidePointerEvents.next(event);\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this._containerElement?.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher, _animationsDisabled = false) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsDisabled = _animationsDisabled;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        this._backdropTransitionendHandler = (event) => {\n            this._disposeBackdrop(event.target);\n        };\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        // Insert the host into the DOM before attaching the portal, otherwise\n        // the animations module will skip animations on repeat attachments.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        const attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n        // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n        // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n        if (typeof attachResult?.onDestroy === 'function') {\n            // In most cases we control the portal and we know when it is being detached so that\n            // we can finish the disposal process. The exception is if the user passes in a custom\n            // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n            // `detach` here instead of `dispose`, because we don't know if the user intends to\n            // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n            attachResult.onDestroy(() => {\n                if (this.hasAttached()) {\n                    // We have to delay the `detach` call, because detaching immediately prevents\n                    // other destroy hooks from running. This is likely a framework bug similar to\n                    // https://github.com/angular/angular/issues/46119\n                    this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));\n                }\n            });\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        this._host?.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = { ...this._config, ...sizeConfig };\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = { ...this._config, direction: dir };\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._animationsDisabled) {\n            this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n        }\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        if (this._animationsDisabled) {\n            this._disposeBackdrop(backdropToDetach);\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.removeEventListener('click', this._backdropClickHandler);\n            backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stretches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breaking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\nconst STANDARD_DROPDOWN_BELOW_POSITIONS = [\n    { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n    { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n    { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom' },\n];\nconst STANDARD_DROPDOWN_ADJACENT_POSITIONS = [\n    { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top' },\n    { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top' },\n    { originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom' },\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._alignItems = '';\n        this._xPosition = '';\n        this._xOffset = '';\n        this._width = '';\n        this._height = '';\n        this._isDisposed = false;\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'left';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'right';\n        return this;\n    }\n    /**\n     * Sets the overlay to the start of the viewport, depending on the overlay direction.\n     * This will be to the left in LTR layouts and to the right in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    start(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'start';\n        return this;\n    }\n    /**\n     * Sets the overlay to the end of the viewport, depending on the overlay direction.\n     * This will be to the right in LTR layouts and to the left in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    end(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._xPosition = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        const xPosition = this._xPosition;\n        const xOffset = this._xOffset;\n        const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n        let marginLeft = '';\n        let marginRight = '';\n        let justifyContent = '';\n        if (shouldBeFlushHorizontally) {\n            justifyContent = 'flex-start';\n        }\n        else if (xPosition === 'center') {\n            justifyContent = 'center';\n            if (isRtl) {\n                marginRight = xOffset;\n            }\n            else {\n                marginLeft = xOffset;\n            }\n        }\n        else if (isRtl) {\n            if (xPosition === 'left' || xPosition === 'end') {\n                justifyContent = 'flex-end';\n                marginLeft = xOffset;\n            }\n            else if (xPosition === 'right' || xPosition === 'start') {\n                justifyContent = 'flex-start';\n                marginRight = xOffset;\n            }\n        }\n        else if (xPosition === 'left' || xPosition === 'start') {\n            justifyContent = 'flex-start';\n            marginLeft = xOffset;\n        }\n        else if (xPosition === 'right' || xPosition === 'end') {\n            justifyContent = 'flex-end';\n            marginRight = xOffset;\n        }\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n        parentStyles.justifyContent = justifyContent;\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: OverlayContainer }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher, _animationsModuleType) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsModuleType = _animationsModuleType;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === 'NoopAnimations');\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: Overlay });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }, {\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkOverlayOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkConnectedOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                }]\n        }], ctorParameters: function () { return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                }] }, { type: i5.Directionality, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayModule, declarations: [CdkConnectedOverlay, CdkOverlayOrigin], imports: [BidiModule, PortalModule, ScrollingModule], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\nOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n}\nFullscreenOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nFullscreenOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, STANDARD_DROPDOWN_ADJACENT_POSITIONS, STANDARD_DROPDOWN_BELOW_POSITIONS, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n","import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, Directive, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component });\nSimpleSnackBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-simple-snackbar\" }, ngImport: i0, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\"], dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-simple-snackbar',\n                    }, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\"] }]\n        }], ctorParameters: function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DATA]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\n/**\n * Base class for snack bar containers.\n * @docs-private\n */\nclass _MatSnackBarContainerBase extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._afterPortalAttached();\n            return result;\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n        });\n    }\n    /**\n     * Called after the portal contents have been attached. Can be\n     * used to modify the DOM once it's guaranteed to be in place.\n     */\n    _afterPortalAttached() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement?.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\n_MatSnackBarContainerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarContainerBase, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSnackBarContainerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: _MatSnackBarContainerBase, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarContainerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends _MatSnackBarContainerBase {\n    _afterPortalAttached() {\n        super._afterPortalAttached();\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            this._elementRef.nativeElement.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            this._elementRef.nativeElement.classList.add('mat-snack-bar-top');\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSnackBarContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatSnackBarContainer, selector: \"snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mat-snack-bar-container\" }, usesInheritance: true, ngImport: i0, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"], dependencies: [{ kind: \"directive\", type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mat-snack-bar-container',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"] }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSnackBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarModule, declarations: [MatSnackBarContainer, SimpleSnackBar], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatSnackBarContainer, MatCommonModule] });\nMatSnackBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarModule, imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [MatSnackBarContainer, MatCommonModule],\n                    declarations: [MatSnackBarContainer, SimpleSnackBar],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\nclass _MatSnackBarBase {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = { ...this._defaultConfig, ...config };\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = { ...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig };\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n}\n_MatSnackBarBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarBase, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: _MatSnackBarBase, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\n_MatSnackBarBase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarBase });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: _MatSnackBarBase, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n        super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n}\nMatSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\nMatSnackBar.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, _MatSnackBarContainerBase, matSnackBarAnimations };\n"],"x_google_ignoreList":[0,1,2]}